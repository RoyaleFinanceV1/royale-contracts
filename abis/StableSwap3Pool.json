{
  "contractName": "StableSwap3Pool",
  "abi": [
    {
      "name": "TokenExchange",
      "inputs": [
        {
          "type": "address",
          "name": "buyer",
          "indexed": true
        },
        {
          "type": "int128",
          "name": "sold_id",
          "indexed": false
        },
        {
          "type": "uint256",
          "name": "tokens_sold",
          "indexed": false
        },
        {
          "type": "int128",
          "name": "bought_id",
          "indexed": false
        },
        {
          "type": "uint256",
          "name": "tokens_bought",
          "indexed": false
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "AddLiquidity",
      "inputs": [
        {
          "type": "address",
          "name": "provider",
          "indexed": true
        },
        {
          "type": "uint256[3]",
          "name": "token_amounts",
          "indexed": false
        },
        {
          "type": "uint256[3]",
          "name": "fees",
          "indexed": false
        },
        {
          "type": "uint256",
          "name": "invariant",
          "indexed": false
        },
        {
          "type": "uint256",
          "name": "token_supply",
          "indexed": false
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "RemoveLiquidity",
      "inputs": [
        {
          "type": "address",
          "name": "provider",
          "indexed": true
        },
        {
          "type": "uint256[3]",
          "name": "token_amounts",
          "indexed": false
        },
        {
          "type": "uint256[3]",
          "name": "fees",
          "indexed": false
        },
        {
          "type": "uint256",
          "name": "token_supply",
          "indexed": false
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "RemoveLiquidityOne",
      "inputs": [
        {
          "type": "address",
          "name": "provider",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "token_amount",
          "indexed": false
        },
        {
          "type": "uint256",
          "name": "coin_amount",
          "indexed": false
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "RemoveLiquidityImbalance",
      "inputs": [
        {
          "type": "address",
          "name": "provider",
          "indexed": true
        },
        {
          "type": "uint256[3]",
          "name": "token_amounts",
          "indexed": false
        },
        {
          "type": "uint256[3]",
          "name": "fees",
          "indexed": false
        },
        {
          "type": "uint256",
          "name": "invariant",
          "indexed": false
        },
        {
          "type": "uint256",
          "name": "token_supply",
          "indexed": false
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "CommitNewAdmin",
      "inputs": [
        {
          "type": "uint256",
          "name": "deadline",
          "indexed": true
        },
        {
          "type": "address",
          "name": "admin",
          "indexed": true
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "NewAdmin",
      "inputs": [
        {
          "type": "address",
          "name": "admin",
          "indexed": true
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "CommitNewFee",
      "inputs": [
        {
          "type": "uint256",
          "name": "deadline",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "fee",
          "indexed": false
        },
        {
          "type": "uint256",
          "name": "admin_fee",
          "indexed": false
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "NewFee",
      "inputs": [
        {
          "type": "uint256",
          "name": "fee",
          "indexed": false
        },
        {
          "type": "uint256",
          "name": "admin_fee",
          "indexed": false
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "RampA",
      "inputs": [
        {
          "type": "uint256",
          "name": "old_A",
          "indexed": false
        },
        {
          "type": "uint256",
          "name": "new_A",
          "indexed": false
        },
        {
          "type": "uint256",
          "name": "initial_time",
          "indexed": false
        },
        {
          "type": "uint256",
          "name": "future_time",
          "indexed": false
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "StopRampA",
      "inputs": [
        {
          "type": "uint256",
          "name": "A",
          "indexed": false
        },
        {
          "type": "uint256",
          "name": "t",
          "indexed": false
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "outputs": [],
      "inputs": [
        {
          "type": "address",
          "name": "_owner"
        },
        {
          "type": "address[3]",
          "name": "_coins"
        },
        {
          "type": "address",
          "name": "_pool_token"
        },
        {
          "type": "uint256",
          "name": "_A"
        },
        {
          "type": "uint256",
          "name": "_fee"
        },
        {
          "type": "uint256",
          "name": "_admin_fee"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "name": "A",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "view",
      "type": "function",
      "gas": 5131
    },
    {
      "name": "get_virtual_price",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "view",
      "type": "function",
      "gas": 1133080
    },
    {
      "name": "calc_token_amount",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [
        {
          "type": "uint256[3]",
          "name": "amounts"
        },
        {
          "type": "bool",
          "name": "deposit"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "gas": 4507414
    },
    {
      "name": "add_liquidity",
      "outputs": [],
      "inputs": [
        {
          "type": "uint256[3]",
          "name": "amounts"
        },
        {
          "type": "uint256",
          "name": "min_mint_amount"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function",
      "gas": 6952575
    },
    {
      "name": "get_dy",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [
        {
          "type": "int128",
          "name": "i"
        },
        {
          "type": "int128",
          "name": "j"
        },
        {
          "type": "uint256",
          "name": "dx"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "gas": 2673213
    },
    {
      "name": "get_dy_underlying",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [
        {
          "type": "int128",
          "name": "i"
        },
        {
          "type": "int128",
          "name": "j"
        },
        {
          "type": "uint256",
          "name": "dx"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "gas": 2672915
    },
    {
      "name": "exchange",
      "outputs": [],
      "inputs": [
        {
          "type": "int128",
          "name": "i"
        },
        {
          "type": "int128",
          "name": "j"
        },
        {
          "type": "uint256",
          "name": "dx"
        },
        {
          "type": "uint256",
          "name": "min_dy"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function",
      "gas": 2817255
    },
    {
      "name": "remove_liquidity",
      "outputs": [],
      "inputs": [
        {
          "type": "uint256",
          "name": "_amount"
        },
        {
          "type": "uint256[3]",
          "name": "min_amounts"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function",
      "gas": 192572
    },
    {
      "name": "remove_liquidity_imbalance",
      "outputs": [],
      "inputs": [
        {
          "type": "uint256[3]",
          "name": "amounts"
        },
        {
          "type": "uint256",
          "name": "max_burn_amount"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function",
      "gas": 6949525
    },
    {
      "name": "calc_withdraw_one_coin",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "_token_amount"
        },
        {
          "type": "int128",
          "name": "i"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "gas": 1375
    },
    {
      "name": "remove_liquidity_one_coin",
      "outputs": [],
      "inputs": [
        {
          "type": "uint256",
          "name": "_token_amount"
        },
        {
          "type": "int128",
          "name": "i"
        },
        {
          "type": "uint256",
          "name": "min_amount"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function",
      "gas": 4024585
    },
    {
      "name": "ramp_A",
      "outputs": [],
      "inputs": [
        {
          "type": "uint256",
          "name": "_future_A"
        },
        {
          "type": "uint256",
          "name": "_future_time"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function",
      "gas": 151817
    },
    {
      "name": "stop_ramp_A",
      "outputs": [],
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "function",
      "gas": 148535
    },
    {
      "name": "commit_new_fee",
      "outputs": [],
      "inputs": [
        {
          "type": "uint256",
          "name": "new_fee"
        },
        {
          "type": "uint256",
          "name": "new_admin_fee"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function",
      "gas": 110371
    },
    {
      "name": "apply_new_fee",
      "outputs": [],
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "function",
      "gas": 97152
    },
    {
      "name": "revert_new_parameters",
      "outputs": [],
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "function",
      "gas": 21805
    },
    {
      "name": "commit_transfer_ownership",
      "outputs": [],
      "inputs": [
        {
          "type": "address",
          "name": "_owner"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function",
      "gas": 74543
    },
    {
      "name": "apply_transfer_ownership",
      "outputs": [],
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "function",
      "gas": 60620
    },
    {
      "name": "revert_transfer_ownership",
      "outputs": [],
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "function",
      "gas": 21895
    },
    {
      "name": "admin_balances",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "i"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "gas": 3391
    },
    {
      "name": "withdraw_admin_fees",
      "outputs": [],
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "function",
      "gas": 21397
    },
    {
      "name": "donate_admin_fees",
      "outputs": [],
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "function",
      "gas": 111299
    },
    {
      "name": "kill_me",
      "outputs": [],
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "function",
      "gas": 37908
    },
    {
      "name": "unkill_me",
      "outputs": [],
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "function",
      "gas": 22045
    },
    {
      "name": "coins",
      "outputs": [
        {
          "type": "address",
          "name": ""
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "arg0"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "gas": 2130
    },
    {
      "name": "balances",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "arg0"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "gas": 2160
    },
    {
      "name": "fee",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "view",
      "type": "function",
      "gas": 2081
    },
    {
      "name": "admin_fee",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "view",
      "type": "function",
      "gas": 2111
    },
    {
      "name": "owner",
      "outputs": [
        {
          "type": "address",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "view",
      "type": "function",
      "gas": 2141
    },
    {
      "name": "initial_A",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "view",
      "type": "function",
      "gas": 2171
    },
    {
      "name": "future_A",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "view",
      "type": "function",
      "gas": 2201
    },
    {
      "name": "initial_A_time",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "view",
      "type": "function",
      "gas": 2231
    },
    {
      "name": "future_A_time",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "view",
      "type": "function",
      "gas": 2261
    },
    {
      "name": "admin_actions_deadline",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "view",
      "type": "function",
      "gas": 2291
    },
    {
      "name": "transfer_ownership_deadline",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "view",
      "type": "function",
      "gas": 2321
    },
    {
      "name": "future_fee",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "view",
      "type": "function",
      "gas": 2351
    },
    {
      "name": "future_admin_fee",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "view",
      "type": "function",
      "gas": 2381
    },
    {
      "name": "future_owner",
      "outputs": [
        {
          "type": "address",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "view",
      "type": "function",
      "gas": 2411
    }
  ],
  "bytecode": "0x6101006150ab6101403960206150ab60c03960c05160a01c1561002157600080fd5b602060206150ab0160c03960c05160a01c1561003c57600080fd5b602060406150ab0160c03960c05160a01c1561005757600080fd5b602060606150ab0160c03960c05160a01c1561007257600080fd5b602060806150ab0160c03960c05160a01c1561008d57600080fd5b61024060006003818352015b600061016061024051600381106100af57600080fd5b6020020151186100be57600080fd5b5b8151600101808352811415610099575b5050600060c052602060c0206101605181556101805160018201556101a0516002820155506101e0516006556101e05160075561020051600255610220516003556101405160045542624f1a0081818301101561012b57600080fd5b808201905090506010556101c05160055561509356341561000a57600080fd5b600436101561001857614f4c565b600035601c526000156101c1575b610140526009546101605260075461018052610160514210156101ae576006546101a0526008546101c0526101a051610180511115610107576101a051610180516101a0518082101561007857600080fd5b80820390509050426101c0518082101561009157600080fd5b8082039050905080820282158284830414176100ac57600080fd5b80905090509050610160516101c051808210156100c857600080fd5b8082039050905080806100da57600080fd5b8204905090508181830110156100ef57600080fd5b808201905090506000526000516101405156506101a9565b6101a0516101a051610180518082101561012057600080fd5b80820390509050426101c0518082101561013957600080fd5b80820390509050808202821582848304141761015457600080fd5b80905090509050610160516101c0518082101561017057600080fd5b80820390509050808061018257600080fd5b8204905090508082101561019557600080fd5b808203905090506000526000516101405156505b6101bf565b610180516000526000516101405156505b005b63f446c1d060005114156101eb5760065801610026565b610140526101405160005260206000f350005b6000156102fd575b61014052670de0b6b3a7640000610160526c0c9f2c9cd04674edea40000000610180526c0c9f2c9cd04674edea400000006101a0526101c060006003818352015b6101606101c0516003811061024857600080fd5b60200201516101c0516003811061025e57600080fd5b600160c052602060c0200154808202821582848304141761027e57600080fd5b80905090509050670de0b6b3a7640000808204905090506101606101c051600381106102a957600080fd5b60200201525b8151600101808352811415610234575b505060606101c0525b60006101c0511115156102da576102f6565b60206101c05103610160015160206101c051036101c0526102c8565b6101405156005b600015610417575b6101a052610140526101605261018052670de0b6b3a76400006101c0526c0c9f2c9cd04674edea400000006101e0526c0c9f2c9cd04674edea400000006102005261022060006003818352015b6101c0610220516003811061036657600080fd5b6020020151610140610220516003811061037f57600080fd5b6020020151808202821582848304141761039857600080fd5b80905090509050670de0b6b3a7640000808204905090506101c061022051600381106103c357600080fd5b60200201525b8151600101808352811415610352575b50506060610220525b6000610220511115156103f457610410565b602061022051036101c0015160206102205103610220526103e2565b6101a05156005b600015610705575b6101c0526101405261016052610180526101a05260006101e05261022060006003818352015b602061022051026101400151610200526101e080516102005181818301101561046d57600080fd5b808201905090508152505b8151600101808352811415610445575b50506101e05115156104a35760006000526000516101c05156505b6000610200526101e051610220526101a051600380820282158284830414176104cb57600080fd5b8090509050905061024052610260600060ff818352015b61022051610280526102c060006003818352015b60206102c0510261014001516102a0526102805161022051808202821582848304141761052257600080fd5b809050905090506102a0516003808202821582848304141761054357600080fd5b80905090509050808061055557600080fd5b820490509050610280525b81516001018083528114156104f6575b50506102205161020052610240516101e051808202821582848304141761059657600080fd5b8090509050905061028051600380820282158284830414176105b757600080fd5b809050905090508181830110156105cd57600080fd5b808201905090506102205180820282158284830414176105ec57600080fd5b809050905090506102405160018082101561060657600080fd5b8082039050905061022051808202821582848304141761062557600080fd5b80905090509050600461028051808202821582848304141761064657600080fd5b8090509050905081818301101561065c57600080fd5b80820190509050808061066e57600080fd5b82049050905061022052610200516102205111156106b557600161022051610200518082101561069d57600080fd5b808203905090501115156106b0576106f1565b6106e0565b60016102005161022051808210156106cc57600080fd5b808203905090501115156106df576106f1565b5b5b81516001018083528114156104e2575b5050610220516000526000516101c0515650005b60001561086d575b6101c0526101405261016052610180526101a0526101405161016051610180516101a0516101c051610140516101e0526101605161020052610180516102205261022051610200516101e05160065801610305565b610280526102a0526102c0526101c0526101a05261018052610160526101405261028080516102e052806020015161030052806040015161032052506101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e05161030051610320516102e05161034052610300516103605261032051610380526101a0516103a0526103a0516103805161036051610340516006580161041f565b6104005261032052610300526102e0526102c0526102a05261028052610260526102405261022052610200526101e0526101c0526101a052610180526101605261014052610400516000526000516101c0515650005b63bb7b8b806000511415610a0f5761014051600658016101f3565b61016052610180526101a0526101405261016080516101c05280602001516101e052806040015161020052506101405161016051610180516101a0516101c0516101e0516102005160065801610026565b61022052610200526101e0526101c0526101a05261018052610160526101405261022051610240526101405161016051610180516101a0516101c0516101e0516102005161022051610240516101c051610260526101e05161028052610200516102a052610240516102c0526102c0516102a05161028051610260516006580161041f565b610320526102405261022052610200526101e0526101c0526101a052610180526101605261014052610320516101405260206101e060046318160ddd6101805261019c6005545afa6109af57600080fd5b601f3d116109bc57600080fd5b6000506101e0516101605261014051670de0b6b3a764000080820282158284830414176109e857600080fd5b809050905090506101605180806109fe57600080fd5b82049050905060005260206000f350005b633883e1196000511415610d085760643560011c15610a2d57600080fd5b60018060c052602060c020546101405260018160c052602060c02001546101605260028160c052602060c020015461018052506101405161016051610180516101a05160065801610026565b6101c0526101a0526101805261016052610140526101c0516101a0526101405161016051610180516101a0516101c051610140516101e052610160516102005261018051610220526101a051610240526102405161022051610200516101e0516006580161070d565b6102a0526101c0526101a0526101805261016052610140526102a0516101c0526101e060006003818352015b60643515610b66576101406101e05160038110610b2a57600080fd5b60200201805160046101e05160038110610b4357600080fd5b6020020135818183011015610b5757600080fd5b80820190509050815250610bb0565b6101406101e05160038110610b7a57600080fd5b60200201805160046101e05160038110610b9357600080fd5b602002013580821015610ba557600080fd5b808203905090508152505b5b8151600101808352811415610b0e575b50506101405161016051610180516101a0516101c0516101e0516101405161020052610160516102205261018051610240526101a05161026052610260516102405161022051610200516006580161070d565b6102c0526101e0526101c0526101a0526101805261016052610140526102c0516101e052602061028060046318160ddd6102205261023c6005545afa610c5957600080fd5b601f3d11610c6657600080fd5b600050610280516102005260006102205260643515610ca4576101e0516101c05180821015610c9457600080fd5b8082039050905061022052610cc5565b6101c0516101e05180821015610cb957600080fd5b80820390509050610220525b61022051610200518082028215828483041417610ce157600080fd5b809050905090506101c0518080610cf757600080fd5b82049050905060005260206000f350005b634515cef360005114156117605762ffffff5415610d2557600080fd5b600162ffffff55600f5415610d3957600080fd5b6060366101403760025460038082028215828483041417610d5957600080fd5b809050905090506008808204905090506101a0526003546101c0526101405161016051610180516101a0516101c0516101e05160065801610026565b610200526101e0526101c0526101a052610180526101605261014052610200516101e052602061028060046318160ddd6102205261023c6005545afa610dda57600080fd5b601f3d11610de757600080fd5b600050610280516102005260006102205260018060c052602060c020546102405260018160c052602060c02001546102605260028160c052602060c020015461028052506000610200511115610ed5576101405161016051610180516101a0516101c0516101e0516102005161022051610240516102605161028051610240516102a052610260516102c052610280516102e0526101e05161030052610300516102e0516102c0516102a0516006580161070d565b6103605261028052610260526102405261022052610200526101e0526101c0526101a05261018052610160526101405261036051610220525b610240516102a052610260516102c052610280516102e05261030060006003818352015b60046103005160038110610f0c57600080fd5b602002013561032052610200511515610f305760006103205111610f2f57600080fd5b5b6103005160038110610f4157600080fd5b600060c052602060c0200154610340526000610320511115611172576002610300511415610fa95760206103e060246370a0823161036052306103805261037c610340515afa610f9057600080fd5b601f3d11610f9d57600080fd5b6000506103e051610320525b600060046103c0527f23b872dd000000000000000000000000000000000000000000000000000000006103e0526103c060048060208461042001018260208501600060045af150508051820191505033602082610420010152602081019050306020826104200101526020810190506004610300516003811061102b57600080fd5b6020020135602082610420010152602081019050806104205261042090508051602001806104e08284600060045af161106357600080fd5b505060206105c06104e0516105006000610340515af161108257600080fd5b60203d808211156110935780611095565b815b905090506105a0526105a08051602001806103608284600060045af16110ba57600080fd5b5050600061036051111561110d576103608060200151600082518060209013156110e357600080fd5b80919012156110f157600080fd5b806020036101000a8204905090509050151561110c57600080fd5b5b600261030051141561117157602061044060246370a082316103c052306103e0526103dc610340515afa61114057600080fd5b601f3d1161114d57600080fd5b60005061044051610320518082101561116557600080fd5b80820390509050610320525b5b610240610300516003811061118657600080fd5b60200201516103205181818301101561119e57600080fd5b808201905090506102a061030051600381106111b957600080fd5b60200201525b8151600101808352811415610ef9575b50506101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e051610300516102a051610320526102c051610340526102e051610360526101e05161038052610380516103605161034051610320516006580161070d565b6103e052610300526102e0526102c0526102a05261028052610260526102405261022052610200526101e0526101c0526101a0526101805261016052610140526103e051610300526102205161030051116112a057600080fd5b610300516103205260006102005111156115a95761034060006003818352015b6103005161024061034051600381106112d857600080fd5b602002015180820282158284830414176112f157600080fd5b8090509050905061022051808061130757600080fd5b820490509050610360526000610380526102a0610340516003811061132b57600080fd5b602002015161036051111561137457610360516102a0610340516003811061135257600080fd5b60200201518082101561136457600080fd5b80820390509050610380526113aa565b6102a0610340516003811061138857600080fd5b6020020151610360518082101561139e57600080fd5b80820390509050610380525b6101a0516103805180820282158284830414176113c657600080fd5b809050905090506402540be4008082049050905061014061034051600381106113ee57600080fd5b60200201526102a0610340516003811061140757600080fd5b6020020151610140610340516003811061142057600080fd5b60200201516101c051808202821582848304141761143d57600080fd5b809050905090506402540be400808204905090508082101561145e57600080fd5b80820390509050610340516003811061147657600080fd5b600160c052602060c02001556102a0610340516003811061149657600080fd5b60200201805161014061034051600381106114b057600080fd5b6020020151808210156114c257600080fd5b808203905090508152505b81516001018083528114156112c0575b50506101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e05161030051610320516102a051610340526102c051610360526102e051610380526101e0516103a0526103a0516103805161036051610340516006580161070d565b6104005261032052610300526102e0526102c0526102a05261028052610260526102405261022052610200526101e0526101c0526101a05261018052610160526101405261040051610320526115cd565b600160c052602060c0206102a05181556102c05160018201556102e0516002820155505b6000610340526102005115156115ea57610300516103405261163f565b6102005161032051610220518082101561160357600080fd5b80820390509050808202821582848304141761161e57600080fd5b8090509050905061022051808061163457600080fd5b820490509050610340525b6064356103405110151515611693576308c379a06103605260206103805260146103a0527f536c697070616765207363726577656420796f750000000000000000000000006103c0526103a050606461037cfd5b602061040060446340c10f19610360523361038052610340516103a05261037c60006005545af16116c357600080fd5b601f3d116116d057600080fd5b6000506104005060043561036052602435610380526044356103a052610140516103c052610160516103e05261018051610400526103005161042052610200516103405181818301101561172357600080fd5b8082019050905061044052337f423f6495a08fc652425cf4ed0d1f9e37e571d9b9529b1c1c23cce780b2e7df0d610100610360a2600062ffffff55005b600015611bc2575b610200526101405261016052610180526101a0526101c0526101e05261016051610140511861179657600080fd5b60006101605112156117a757600080fd5b600361016051126117b757600080fd5b60006101405112156117c857600080fd5b600361014051126117d857600080fd5b6101405161016051610180516101a0516101c0516101e051610200516102205160065801610026565b6102405261022052610200526101e0526101c0526101a05261018052610160526101405261024051610220526101405161016051610180516101a0516101c0516101e0516102005161022051610240516101a051610260526101c051610280526101e0516102a052610220516102c0526102c0516102a05161028051610260516006580161041f565b610320526102405261022052610200526101e0526101c0526101a0526101805261016052610140526103205161024052610240516102605260006102805261022051600380820282158284830414176118e257600080fd5b809050905090506102a05260006102c0526102e060006003818352015b610140516102e051141561191a57610180516102c052611950565b610160516102e051181561194a576101a06102e0516003811061193c57600080fd5b60200201516102c05261194f565b6119cc565b5b61028080516102c05181818301101561196857600080fd5b808201905090508152506102605161024051808202821582848304141761198e57600080fd5b809050905090506102c051600380820282158284830414176119af57600080fd5b8090509050905080806119c157600080fd5b820490509050610260525b81516001018083528114156118ff575b5050610260516102405180820282158284830414176119fa57600080fd5b809050905090506102a05160038082028215828483041417611a1b57600080fd5b809050905090508080611a2d57600080fd5b8204905090506102605261028051610240516102a0518080611a4e57600080fd5b820490509050818183011015611a6357600080fd5b808201905090506102e0526000610300526102405161032052610340600060ff818352015b610320516103005261032051610320518082028215828483041417611aac57600080fd5b8090509050905061026051818183011015611ac657600080fd5b808201905090506002610320518082028215828483041417611ae757600080fd5b809050905090506102e051818183011015611b0157600080fd5b808201905090506102405180821015611b1957600080fd5b808203905090508080611b2b57600080fd5b8204905090506103205261030051610320511115611b72576001610320516103005180821015611b5a57600080fd5b80820390509050111515611b6d57611bae565b611b9d565b6001610300516103205180821015611b8957600080fd5b80820390509050111515611b9c57611bae565b5b5b8151600101808352811415611a88575b505061032051600052600051610200515650005b635e0d443f6000511415611ea65760043580806000811215611be057195b607f1c15611bed57600080fd5b90505060243580806000811215611c0057195b607f1c15611c0d57600080fd5b905050670de0b6b3a7640000610140526c0c9f2c9cd04674edea40000000610160526c0c9f2c9cd04674edea40000000610180526101405161016051610180516101a0516101c0516101e051600658016101f3565b6102005261022052610240526101e0526101c0526101a05261018052610160526101405261020080516101a05280602001516101c05280604001516101e052506101a060043560038110611cb557600080fd5b602002015160443561014060043560038110611cd057600080fd5b60200201518082028215828483041417611ce957600080fd5b80905090509050670de0b6b3a764000080820490509050818183011015611d0f57600080fd5b80820190509050610200526101405161016051610180516101a0516101c0516101e0516102005161022051600435610240526024356102605261020051610280526101a0516102a0526101c0516102c0526101e0516102e0526102e0516102c0516102a05161028051610260516102405160065801611768565b6103405261022052610200526101e0526101c0526101a05261018052610160526101405261034051610220526101a060243560038110611dc857600080fd5b60200201516102205180821015611dde57600080fd5b80820390509050600180821015611df457600080fd5b80820390509050670de0b6b3a76400008082028215828483041417611e1857600080fd5b8090509050905061014060243560038110611e3257600080fd5b60200201518080611e4257600080fd5b82049050905061024052600254610240518082028215828483041417611e6757600080fd5b809050905090506402540be4008082049050905061026052610240516102605180821015611e9457600080fd5b8082039050905060005260206000f350005b6307211ef760005114156121275760043580806000811215611ec457195b607f1c15611ed157600080fd5b90505060243580806000811215611ee457195b607f1c15611ef157600080fd5b905050610140516101605161018051600658016101f3565b6101a0526101c0526101e0526101805261016052610140526101a08051610140528060200151610160528060400151610180525060016101a05264e8d4a510006101c05264e8d4a510006101e05261014060043560038110611f6a57600080fd5b60200201516044356101a060043560038110611f8557600080fd5b60200201518082028215828483041417611f9e57600080fd5b80905090509050818183011015611fb457600080fd5b80820190509050610200526101405161016051610180516101a0516101c0516101e051610200516102205160043561024052602435610260526102005161028052610140516102a052610160516102c052610180516102e0526102e0516102c0516102a05161028051610260516102405160065801611768565b6103405261022052610200526101e0526101c0526101a05261018052610160526101405261034051610220526101406024356003811061206d57600080fd5b6020020151610220518082101561208357600080fd5b8082039050905060018082101561209957600080fd5b808203905090506101a0602435600381106120b357600080fd5b602002015180806120c357600080fd5b820490509050610240526002546102405180820282158284830414176120e857600080fd5b809050905090506402540be400808204905090506102605261024051610260518082101561211557600080fd5b8082039050905060005260206000f350005b633df021246000511415612a545762ffffff541561214457600080fd5b600162ffffff556004358080600081121561215b57195b607f1c1561216857600080fd5b9050506024358080600081121561217b57195b607f1c1561218857600080fd5b905050600f541561219857600080fd5b670de0b6b3a7640000610140526c0c9f2c9cd04674edea40000000610160526c0c9f2c9cd04674edea400000006101805260018060c052602060c020546101a05260018160c052602060c02001546101c05260028160c052602060c02001546101e052506101405161016051610180516101a0516101c0516101e0516102005161022051610240516101a051610260526101c051610280526101e0516102a0526102a051610280516102605160065801610305565b6103005261032052610340526102405261022052610200526101e0526101c0526101a0526101805261016052610140526103008051610200528060200151610220528060400151610240525060443561026052600435600381106122b057600080fd5b600060c052602060c0200154610280526002600435141561230b57602061032060246370a082316102a052306102c0526102bc610280515afa6122f257600080fd5b601f3d116122ff57600080fd5b60005061032051610260525b60006004610300527f23b872dd000000000000000000000000000000000000000000000000000000006103205261030060048060208461036001018260208501600060045af15050805182019150503360208261036001015260208101905030602082610360010152602081019050604435602082610360010152602081019050806103605261036090508051602001806104208284600060045af16123b057600080fd5b50506020610500610420516104406000610280515af16123cf57600080fd5b60203d808211156123e057806123e2565b815b905090506104e0526104e08051602001806102a08284600060045af161240757600080fd5b505060006102a051111561245a576102a080602001516000825180602090131561243057600080fd5b809190121561243e57600080fd5b806020036101000a8204905090509050151561245957600080fd5b5b600260043514156124bd57602061038060246370a0823161030052306103205261031c610280515afa61248c57600080fd5b601f3d1161249957600080fd5b6000506103805161026051808210156124b157600080fd5b80820390509050610260525b610200600435600381106124d057600080fd5b602002015161026051610140600435600381106124ec57600080fd5b6020020151808202821582848304141761250557600080fd5b80905090509050670de0b6b3a76400008082049050905081818301101561252b57600080fd5b80820190509050610300526101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e051610300516103205160043561034052602435610360526103005161038052610200516103a052610220516103c052610240516103e0526103e0516103c0516103a05161038051610360516103405160065801611768565b6104405261032052610300526102e0526102c0526102a05261028052610260526102405261022052610200526101e0526101c0526101a05261018052610160526101405261044051610320526102006024356003811061262457600080fd5b6020020151610320518082101561263a57600080fd5b8082039050905060018082101561265057600080fd5b808203905090506103405261034051600254808202821582848304141761267657600080fd5b809050905090506402540be40080820490509050610360526103405161036051808210156126a357600080fd5b80820390509050670de0b6b3a764000080820282158284830414176126c757600080fd5b80905090509050610140602435600381106126e157600080fd5b602002015180806126f157600080fd5b820490509050610340526064356103405110151515612774576308c379a06103805260206103a052602e6103c0527f45786368616e676520726573756c74656420696e20666577657220636f696e736103e0527f207468616e206578706563746564000000000000000000000000000000000000610400526103c050608461039cfd5b61036051600354808202821582848304141761278f57600080fd5b809050905090506402540be400808204905090506103805261038051670de0b6b3a764000080820282158284830414176127c857600080fd5b80905090509050610140602435600381106127e257600080fd5b602002015180806127f257600080fd5b820490509050610380526101a06004356003811061280f57600080fd5b60200201516102605181818301101561282757600080fd5b808201905090506004356003811061283e57600080fd5b600160c052602060c02001556101a06024356003811061285d57600080fd5b6020020151610340518082101561287357600080fd5b80820390509050610380518082101561288b57600080fd5b80820390509050602435600381106128a257600080fd5b600160c052602060c0200155600060046103a0527fa9059cbb000000000000000000000000000000000000000000000000000000006103c0526103a060048060208461040001018260208501600060045af15050805182019150503360208261040001015260208101905061034051602082610400010152602081019050806104005261040090508051602001806104a08284600060045af161294457600080fd5b505060206105606104a0516104c060006024356003811061296457600080fd5b600060c052602060c02001545af161297b57600080fd5b60203d8082111561298c578061298e565b815b90509050610540526105408051602001806102a08284600060045af16129b357600080fd5b505060006102a0511115612a06576102a08060200151600082518060209013156129dc57600080fd5b80919012156129ea57600080fd5b806020036101000a82049050905090501515612a0557600080fd5b5b6004356103a0526044356103c0526024356103e0526103405161040052337f8b3e96f2b889fa771c53c981b40daf005f63f637f1869f707052d15a3dd9714060806103a0a2600062ffffff55005b63ecb586a56000511415612e2b5762ffffff5415612a7157600080fd5b600162ffffff5560206101c060046318160ddd6101605261017c6005545afa612a9957600080fd5b601f3d11612aa657600080fd5b6000506101c0516101405260c0366101603761022060006003818352015b6102205160038110612ad557600080fd5b600160c052602060c02001546004358082028215828483041417612af857600080fd5b80905090509050610140518080612b0e57600080fd5b8204905090506102405260246102205160038110612b2b57600080fd5b60200201356102405110151515612ba6576308c379a06102605260206102805260306102a0527f5769746864726177616c20726573756c74656420696e20666577657220636f696102c0527f6e73207468616e206578706563746564000000000000000000000000000000006102e0526102a050608461027cfd5b6102205160038110612bb757600080fd5b600160c052602060c0200180546102405180821015612bd557600080fd5b80820390509050815550610240516101606102205160038110612bf757600080fd5b6020020152600060046102c0527fa9059cbb000000000000000000000000000000000000000000000000000000006102e0526102c060048060208461032001018260208501600060045af15050805182019150503360208261032001015260208101905061024051602082610320010152602081019050806103205261032090508051602001806103c08284600060045af1612c9257600080fd5b505060206104806103c0516103e060006102205160038110612cb357600080fd5b600060c052602060c02001545af1612cca57600080fd5b60203d80821115612cdb5780612cdd565b815b90509050610460526104608051602001806102608284600060045af1612d0257600080fd5b50506000610260511115612d5557610260806020015160008251806020901315612d2b57600080fd5b8091901215612d3957600080fd5b806020036101000a82049050905090501515612d5457600080fd5b5b5b8151600101808352811415612ac4575b505060206102c060446379cc67906102205233610240526004356102605261023c60006005545af1612d9757600080fd5b601f3d11612da457600080fd5b6000506102c050610160516102205261018051610240526101a051610260526101c051610280526101e0516102a052610200516102c0526101405160043580821015612def57600080fd5b808203905090506102e052337fa49d4cf02656aebf8c771f5a8585638a2a15ee6c97cf7205d4208ed7c1df252d60e0610220a2600062ffffff55005b639fdaea0c600051141561374a5762ffffff5415612e4857600080fd5b600162ffffff55600f5415612e5c57600080fd5b60206101c060046318160ddd6101605261017c6005545afa612e7d57600080fd5b601f3d11612e8a57600080fd5b6000506101c0516101405260006101405118612ea557600080fd5b60025460038082028215828483041417612ebe57600080fd5b8090509050905060088082049050905061016052600354610180526101405161016051610180516101a05160065801610026565b6101c0526101a0526101805261016052610140526101c0516101a05260018060c052602060c020546101c05260018160c052602060c02001546101e05260028160c052602060c020015461020052506101c051610220526101e0516102405261020051610260526101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516101c0516102a0526101e0516102c052610200516102e0526101a05161030052610300516102e0516102c0516102a0516006580161070d565b6103605261028052610260526102405261022052610200526101e0526101c0526101a05261018052610160526101405261036051610280526102a060006003818352015b6102206102a0516003811061301657600080fd5b60200201805160046102a0516003811061302f57600080fd5b60200201358082101561304157600080fd5b808203905090508152505b8151600101808352811415613002575b50506101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a051610220516102c052610240516102e05261026051610300526101a0516103205261032051610300516102e0516102c0516006580161070d565b610380526102a05261028052610260526102405261022052610200526101e0526101c0526101a052610180526101605261014052610380516102a0526060366102c03761032060006003818352015b6102a0516101c0610320516003811061312e57600080fd5b6020020151808202821582848304141761314757600080fd5b8090509050905061028051808061315d57600080fd5b82049050905061034052600061036052610220610320516003811061318157600080fd5b60200201516103405111156131ca576103405161022061032051600381106131a857600080fd5b6020020151808210156131ba57600080fd5b8082039050905061036052613200565b61022061032051600381106131de57600080fd5b602002015161034051808210156131f457600080fd5b80820390509050610360525b6101605161036051808202821582848304141761321c57600080fd5b809050905090506402540be400808204905090506102c0610320516003811061324457600080fd5b6020020152610220610320516003811061325d57600080fd5b60200201516102c0610320516003811061327657600080fd5b602002015161018051808202821582848304141761329357600080fd5b809050905090506402540be40080820490509050808210156132b457600080fd5b8082039050905061032051600381106132cc57600080fd5b600160c052602060c020015561022061032051600381106132ec57600080fd5b6020020180516102c0610320516003811061330657600080fd5b60200201518082101561331857600080fd5b808203905090508152505b8151600101808352811415613116575b50506101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e05161030051610320516102205161034052610240516103605261026051610380526101a0516103a0526103a0516103805161036051610340516006580161070d565b6104005261032052610300526102e0526102c0526102a05261028052610260526102405261022052610200526101e0526101c0526101a052610180526101605261014052610400516103205261028051610320518082101561340f57600080fd5b8082039050905061014051808202821582848304141761342e57600080fd5b8090509050905061028051808061344457600080fd5b820490509050610340526000610340511861345e57600080fd5b6103408051600181818301101561347457600080fd5b8082019050905081525060643561034051111515156134d2576308c379a06103605260206103805260146103a0527f536c697070616765207363726577656420796f750000000000000000000000006103c0526103a050606461037cfd5b602061040060446379cc6790610360523361038052610340516103a05261037c60006005545af161350257600080fd5b601f3d1161350f57600080fd5b6000506104005061036060006003818352015b60006004610360516003811061353757600080fd5b602002013518156136b057600060046103e0527fa9059cbb00000000000000000000000000000000000000000000000000000000610400526103e060048060208461044001018260208501600060045af150508051820191505033602082610440010152602081019050600461036051600381106135b457600080fd5b6020020135602082610440010152602081019050806104405261044090508051602001806104e08284600060045af16135ec57600080fd5b505060206105a06104e0516105006000610360516003811061360d57600080fd5b600060c052602060c02001545af161362457600080fd5b60203d808211156136355780613637565b815b90509050610580526105808051602001806103808284600060045af161365c57600080fd5b505060006103805111156136af5761038080602001516000825180602090131561368557600080fd5b809190121561369357600080fd5b806020036101000a820490509050905015156136ae57600080fd5b5b5b5b8151600101808352811415613522575b505060043561036052602435610380526044356103a0526102c0516103c0526102e0516103e05261030051610400526102a0516104205261014051610340518082101561370d57600080fd5b8082039050905061044052337f173599dbf9c6ca6f7c3b590df07ae98a45d74ff54065505141e7de6c46a624c2610100610360a2600062ffffff55005b600015613a7b575b610200526101405261016052610180526101a0526101c0526101e052600061016051121561377f57600080fd5b6003610160511261378f57600080fd5b6101e0516102205260006102405261014051600380820282158284830414176137b757600080fd5b80905090509050610260526000610280526102a060006003818352015b610160516102a0511815613804576101806102a051600381106137f657600080fd5b602002015161028052613809565b613885565b61024080516102805181818301101561382157600080fd5b80820190509050815250610220516101e051808202821582848304141761384757600080fd5b80905090509050610280516003808202821582848304141761386857600080fd5b80905090509050808061387a57600080fd5b820490509050610220525b81516001018083528114156137d4575b5050610220516101e05180820282158284830414176138b357600080fd5b8090509050905061026051600380820282158284830414176138d457600080fd5b8090509050905080806138e657600080fd5b82049050905061022052610240516101e05161026051808061390757600080fd5b82049050905081818301101561391c57600080fd5b808201905090506102a05260006102c0526101e0516102e052610300600060ff818352015b6102e0516102c0526102e0516102e051808202821582848304141761396557600080fd5b809050905090506102205181818301101561397f57600080fd5b8082019050905060026102e05180820282158284830414176139a057600080fd5b809050905090506102a0518181830110156139ba57600080fd5b808201905090506101e051808210156139d257600080fd5b8082039050905080806139e457600080fd5b8204905090506102e0526102c0516102e0511115613a2b5760016102e0516102c05180821015613a1357600080fd5b80820390509050111515613a2657613a67565b613a56565b60016102c0516102e05180821015613a4257600080fd5b80820390509050111515613a5557613a67565b5b5b8151600101808352811415613941575b50506102e051600052600051610200515650005b600015614124575b6101805261014052610160526101405161016051610180516101a05160065801610026565b6101c0526101a0526101805261016052610140526101c0516101a05260025460038082028215828483041417613add57600080fd5b809050905090506008808204905090506101c05260016101e05264e8d4a510006102005264e8d4a510006102205260206102c060046318160ddd6102605261027c6005545afa613b2c57600080fd5b601f3d11613b3957600080fd5b6000506102c051610240526101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a051600658016101f3565b6102c0526102e052610300526102a05261028052610260526102405261022052610200526101e0526101c0526101a0526101805261016052610140526102c080516102605280602001516102805280604001516102a052506101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c051610260516102e05261028051610300526102a051610320526101a051610340526103405161032051610300516102e0516006580161041f565b6103a0526102c0526102a05261028052610260526102405261022052610200526101e0526101c0526101a0526101805261016052610140526103a0516102c0526102c051610140516102c0518082028215828483041417613ca257600080fd5b80905090509050610240518080613cb857600080fd5b82049050905080821015613ccb57600080fd5b808203905090506102e052610260516103005261028051610320526102a05161034052610140610380525b61038051516020610380510161038052610380610380511015613d1857613cf6565b6101a0516103a052610160516103c052610260516103e05261028051610400526102a051610420526102e051610440526104405161042051610400516103e0516103c0516103a05160065801613752565b6104a052610360610380525b6103805152602061038051036103805261014061038051101515613d9857613d75565b6104a051610360526102606101605160038110613db457600080fd5b60200201516103605180821015613dca57600080fd5b808203905090506101e06101605160038110613de557600080fd5b60200201518080613df557600080fd5b820490509050610380526103a060006003818352015b60006103c052610160516103a0511415613e8d576102606103a05160038110613e3357600080fd5b60200201516102e0518082028215828483041417613e5057600080fd5b809050905090506102c0518080613e6657600080fd5b8204905090506103605180821015613e7d57600080fd5b808203905090506103c052613f0c565b6102606103a05160038110613ea157600080fd5b60200201516102606103a05160038110613eba57600080fd5b60200201516102e0518082028215828483041417613ed757600080fd5b809050905090506102c0518080613eed57600080fd5b82049050905080821015613f0057600080fd5b808203905090506103c0525b6103006103a05160038110613f2057600080fd5b6020020180516101c0516103c0518082028215828483041417613f4257600080fd5b809050905090506402540be4008082049050905080821015613f6357600080fd5b808203905090508152505b8151600101808352811415613e0b575b50506103006101605160038110613f9457600080fd5b60200201516101406103c0525b6103c0515160206103c051016103c0526103c06103c0511015613fc357613fa1565b6101a0516103e05261016051610400526103005161042052610320516104405261034051610460526102e0516104805261048051610460516104405161042051610400516103e05160065801613752565b6104e0526103a06103c0525b6103c0515260206103c051036103c0526101406103c05110151561404357614020565b6104e0518082101561405457600080fd5b808203905090506103a0526103a05160018082101561407257600080fd5b808203905090506101e0610160516003811061408d57600080fd5b6020020151808061409d57600080fd5b8204905090506103a0526103c08080806103a051815250506020810190508080610380516103a051808210156140d257600080fd5b808203905090508152505060409050905060c05260c051610400525b6000610400511115156141005761411c565b602061040051036103c0015160206104005103610400526140ee565b610180515650005b63cc2b27d760005114156141a8576024358080600081121561414257195b607f1c1561414f57600080fd5b9050506004356101405260243561016052610160516101405160065801613a83565b6101c0526101e0526101c080808080516102005250506020810190508080805161022052505050506102005160005260206000f350005b631a4d01d260005114156145165762ffffff54156141c557600080fd5b600162ffffff55602435808060008112156141dc57195b607f1c156141e957600080fd5b905050600f54156141f957600080fd5b604036610140376101405161016051600435610180526024356101a0526101a0516101805160065801613a83565b6102005261022052610160526101405261020080808080516102405250506020810190508080805161026052505050506102408051610140528060200151610160525060443561014051101515156142be576308c379a06101805260206101a05260186101c0527f4e6f7420656e6f75676820636f696e732072656d6f76656400000000000000006101e0526101c050606461019cfd5b602435600381106142ce57600080fd5b600160c052602060c020018054610140516101605160035480820282158284830414176142fa57600080fd5b809050905090506402540be4008082049050905081818301101561431d57600080fd5b808201905090508082101561433157600080fd5b80820390509050815550602061022060446379cc679061018052336101a0526004356101c05261019c60006005545af161436a57600080fd5b601f3d1161437757600080fd5b60005061022050600060046101e0527fa9059cbb00000000000000000000000000000000000000000000000000000000610200526101e060048060208461024001018260208501600060045af15050805182019150503360208261024001015260208101905061014051602082610240010152602081019050806102405261024090508051602001806102e08284600060045af161441457600080fd5b505060206103a06102e05161030060006024356003811061443457600080fd5b600060c052602060c02001545af161444b57600080fd5b60203d8082111561445c578061445e565b815b90509050610380526103808051602001806101808284600060045af161448357600080fd5b505060006101805111156144d6576101808060200151600082518060209013156144ac57600080fd5b80919012156144ba57600080fd5b806020036101000a820490509050905015156144d557600080fd5b5b6004356101e0526101405161020052337f9e96dd3b997a2a257eec4df9bb6eaf626e206df5f543bd963682d143300be31060406101e0a2600062ffffff55005b633c157e6460005114156146ae57600454331461453257600080fd5b6008546201518081818301101561454857600080fd5b8082019050905042101561455b57600080fd5b426201518081818301101561456f57600080fd5b80820190509050602435101561458457600080fd5b6101405160065801610026565b61016052610140526101605161014052600060043511156145b957620f4240600435106145bc565b60005b6145c557600080fd5b610140516004351015156145fe5761014051600a80820282158284830414176145ed57600080fd5b809050905090506004351115614601565b60005b1561460d576001614649565b6101405160043510156146455761014051600435600a808202821582848304141761463757600080fd5b809050905090501015614648565b60005b5b5b61465357600080fd5b6101405160065560043560075542600855602435600955610140516101605260043561018052426101a0526024356101c0527fa2b71ec6df949300b59aab36b55e189697b750119dd349fcfa8c0f779e83c2546080610160a1005b63551a658860005114156147335760045433146146ca57600080fd5b6101405160065801610026565b6101605261014052610160516101405261014051600655610140516007554260085542600955610140516101605242610180527f46e22fb3709ad289f62ce63d469248536dbc78d82b84a3d7e74ad606dc2019386040610160a1005b635b5a146760005114156147f157600454331461474f57600080fd5b600a541561475c57600080fd5b64012a05f200600435111561477057600080fd5b6402540be400602435111561478457600080fd5b426203f48081818301101561479857600080fd5b808201905090506101405261014051600a55600435600c55602435600d556004356101605260243561018052610140517f351fc5da2fbf480f2225debf3664a4bc90fa9923743aad58b4603f648e931fe06040610160a2005b634f12fe97600051141561488557600454331461480d57600080fd5b600a5442101561481c57600080fd5b6000600a541861482b57600080fd5b6000600a55600c5461014052600d546101605261014051600255610160516003556101405161018052610160516101a0527fbe12859b636aed607d5230b2cc2711f68d70e51060e6cca1f575ef5d2fcc95d16040610180a1005b63226840fb60005114156148a85760045433146148a157600080fd5b6000600a55005b636b441a40600051141561493c5760043560a01c156148c657600080fd5b60045433146148d457600080fd5b600b54156148e157600080fd5b426203f4808181830110156148f557600080fd5b808201905090506101405261014051600b55600435600e55600435610140517f181aa3aa17d4cbf99265dd4443eba009433d3cde79d60164fde1d1a192beb93560006000a3005b636a1c05ae60005114156149b557600454331461495857600080fd5b600b5442101561496757600080fd5b6000600b541861497657600080fd5b6000600b55600e546101405261014051600455610140517f71614071b88dee5e0b2ae578a9dd7b2ebbe9ae832ba419dc0242cd065a290b6c60006000a2005b6386fbf19360005114156149d85760045433146149d157600080fd5b6000600b55005b63e2e7d2646000511415614a745760206101c060246370a0823161014052306101605261015c60043560038110614a0e57600080fd5b600060c052602060c02001545afa614a2557600080fd5b601f3d11614a3257600080fd5b6000506101c05160043560038110614a4957600080fd5b600160c052602060c020015480821015614a6257600080fd5b8082039050905060005260206000f350005b6330c540856000511415614c8f576004543314614a9057600080fd5b61014060006003818352015b6101405160038110614aad57600080fd5b600060c052602060c020015461016052602061022060246370a082316101a052306101c0526101bc610160515afa614ae457600080fd5b601f3d11614af157600080fd5b600050610220516101405160038110614b0957600080fd5b600160c052602060c020015480821015614b2257600080fd5b80820390509050610180526000610180511115614c7a5760006004610200527fa9059cbb000000000000000000000000000000000000000000000000000000006102205261020060048060208461026001018260208501600060045af15050805182019150503360208261026001015260208101905061018051602082610260010152602081019050806102605261026090508051602001806103008284600060045af1614bcf57600080fd5b505060206103c0610300516103206000610160515af1614bee57600080fd5b60203d80821115614bff5780614c01565b815b905090506103a0526103a08051602001806101a08284600060045af1614c2657600080fd5b505060006101a0511115614c79576101a0806020015160008251806020901315614c4f57600080fd5b8091901215614c5d57600080fd5b806020036101000a82049050905090501515614c7857600080fd5b5b5b5b8151600101808352811415614a9c575b5050005b63524c39016000511415614d3d576004543314614cab57600080fd5b61014060006003818352015b60206101e060246370a0823161016052306101805261017c6101405160038110614ce057600080fd5b600060c052602060c02001545afa614cf757600080fd5b601f3d11614d0457600080fd5b6000506101e0516101405160038110614d1c57600080fd5b600160c052602060c02001555b8151600101808352811415614cb7575b5050005b63e36988536000511415614d6e576004543314614d5957600080fd5b4260105411614d6757600080fd5b6001600f55005b633046f9726000511415614d91576004543314614d8a57600080fd5b6000600f55005b63c66106576000511415614dc65760043560038110614daf57600080fd5b600060c052602060c020015460005260206000f350005b634903b0d16000511415614dfb5760043560038110614de457600080fd5b600160c052602060c020015460005260206000f350005b63ddca3f436000511415614e175760025460005260206000f350005b63fee3f7f96000511415614e335760035460005260206000f350005b638da5cb5b6000511415614e4f5760045460005260206000f350005b635409491a6000511415614e6b5760065460005260206000f350005b63b4b577ad6000511415614e875760075460005260206000f350005b632081066c6000511415614ea35760085460005260206000f350005b63140522886000511415614ebf5760095460005260206000f350005b63405e28f86000511415614edb57600a5460005260206000f350005b63e0a0b5866000511415614ef757600b5460005260206000f350005b6358680d0b6000511415614f1357600c5460005260206000f350005b63e38244626000511415614f2f57600d5460005260206000f350005b631ec0cdc16000511415614f4b57600e5460005260206000f350005b5b60006000fd5b61014161509303610141600039610141615093036000f3",
  "deployedBytecode": "0x341561000a57600080fd5b600436101561001857614f4c565b600035601c526000156101c1575b610140526009546101605260075461018052610160514210156101ae576006546101a0526008546101c0526101a051610180511115610107576101a051610180516101a0518082101561007857600080fd5b80820390509050426101c0518082101561009157600080fd5b8082039050905080820282158284830414176100ac57600080fd5b80905090509050610160516101c051808210156100c857600080fd5b8082039050905080806100da57600080fd5b8204905090508181830110156100ef57600080fd5b808201905090506000526000516101405156506101a9565b6101a0516101a051610180518082101561012057600080fd5b80820390509050426101c0518082101561013957600080fd5b80820390509050808202821582848304141761015457600080fd5b80905090509050610160516101c0518082101561017057600080fd5b80820390509050808061018257600080fd5b8204905090508082101561019557600080fd5b808203905090506000526000516101405156505b6101bf565b610180516000526000516101405156505b005b63f446c1d060005114156101eb5760065801610026565b610140526101405160005260206000f350005b6000156102fd575b61014052670de0b6b3a7640000610160526c0c9f2c9cd04674edea40000000610180526c0c9f2c9cd04674edea400000006101a0526101c060006003818352015b6101606101c0516003811061024857600080fd5b60200201516101c0516003811061025e57600080fd5b600160c052602060c0200154808202821582848304141761027e57600080fd5b80905090509050670de0b6b3a7640000808204905090506101606101c051600381106102a957600080fd5b60200201525b8151600101808352811415610234575b505060606101c0525b60006101c0511115156102da576102f6565b60206101c05103610160015160206101c051036101c0526102c8565b6101405156005b600015610417575b6101a052610140526101605261018052670de0b6b3a76400006101c0526c0c9f2c9cd04674edea400000006101e0526c0c9f2c9cd04674edea400000006102005261022060006003818352015b6101c0610220516003811061036657600080fd5b6020020151610140610220516003811061037f57600080fd5b6020020151808202821582848304141761039857600080fd5b80905090509050670de0b6b3a7640000808204905090506101c061022051600381106103c357600080fd5b60200201525b8151600101808352811415610352575b50506060610220525b6000610220511115156103f457610410565b602061022051036101c0015160206102205103610220526103e2565b6101a05156005b600015610705575b6101c0526101405261016052610180526101a05260006101e05261022060006003818352015b602061022051026101400151610200526101e080516102005181818301101561046d57600080fd5b808201905090508152505b8151600101808352811415610445575b50506101e05115156104a35760006000526000516101c05156505b6000610200526101e051610220526101a051600380820282158284830414176104cb57600080fd5b8090509050905061024052610260600060ff818352015b61022051610280526102c060006003818352015b60206102c0510261014001516102a0526102805161022051808202821582848304141761052257600080fd5b809050905090506102a0516003808202821582848304141761054357600080fd5b80905090509050808061055557600080fd5b820490509050610280525b81516001018083528114156104f6575b50506102205161020052610240516101e051808202821582848304141761059657600080fd5b8090509050905061028051600380820282158284830414176105b757600080fd5b809050905090508181830110156105cd57600080fd5b808201905090506102205180820282158284830414176105ec57600080fd5b809050905090506102405160018082101561060657600080fd5b8082039050905061022051808202821582848304141761062557600080fd5b80905090509050600461028051808202821582848304141761064657600080fd5b8090509050905081818301101561065c57600080fd5b80820190509050808061066e57600080fd5b82049050905061022052610200516102205111156106b557600161022051610200518082101561069d57600080fd5b808203905090501115156106b0576106f1565b6106e0565b60016102005161022051808210156106cc57600080fd5b808203905090501115156106df576106f1565b5b5b81516001018083528114156104e2575b5050610220516000526000516101c0515650005b60001561086d575b6101c0526101405261016052610180526101a0526101405161016051610180516101a0516101c051610140516101e0526101605161020052610180516102205261022051610200516101e05160065801610305565b610280526102a0526102c0526101c0526101a05261018052610160526101405261028080516102e052806020015161030052806040015161032052506101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e05161030051610320516102e05161034052610300516103605261032051610380526101a0516103a0526103a0516103805161036051610340516006580161041f565b6104005261032052610300526102e0526102c0526102a05261028052610260526102405261022052610200526101e0526101c0526101a052610180526101605261014052610400516000526000516101c0515650005b63bb7b8b806000511415610a0f5761014051600658016101f3565b61016052610180526101a0526101405261016080516101c05280602001516101e052806040015161020052506101405161016051610180516101a0516101c0516101e0516102005160065801610026565b61022052610200526101e0526101c0526101a05261018052610160526101405261022051610240526101405161016051610180516101a0516101c0516101e0516102005161022051610240516101c051610260526101e05161028052610200516102a052610240516102c0526102c0516102a05161028051610260516006580161041f565b610320526102405261022052610200526101e0526101c0526101a052610180526101605261014052610320516101405260206101e060046318160ddd6101805261019c6005545afa6109af57600080fd5b601f3d116109bc57600080fd5b6000506101e0516101605261014051670de0b6b3a764000080820282158284830414176109e857600080fd5b809050905090506101605180806109fe57600080fd5b82049050905060005260206000f350005b633883e1196000511415610d085760643560011c15610a2d57600080fd5b60018060c052602060c020546101405260018160c052602060c02001546101605260028160c052602060c020015461018052506101405161016051610180516101a05160065801610026565b6101c0526101a0526101805261016052610140526101c0516101a0526101405161016051610180516101a0516101c051610140516101e052610160516102005261018051610220526101a051610240526102405161022051610200516101e0516006580161070d565b6102a0526101c0526101a0526101805261016052610140526102a0516101c0526101e060006003818352015b60643515610b66576101406101e05160038110610b2a57600080fd5b60200201805160046101e05160038110610b4357600080fd5b6020020135818183011015610b5757600080fd5b80820190509050815250610bb0565b6101406101e05160038110610b7a57600080fd5b60200201805160046101e05160038110610b9357600080fd5b602002013580821015610ba557600080fd5b808203905090508152505b5b8151600101808352811415610b0e575b50506101405161016051610180516101a0516101c0516101e0516101405161020052610160516102205261018051610240526101a05161026052610260516102405161022051610200516006580161070d565b6102c0526101e0526101c0526101a0526101805261016052610140526102c0516101e052602061028060046318160ddd6102205261023c6005545afa610c5957600080fd5b601f3d11610c6657600080fd5b600050610280516102005260006102205260643515610ca4576101e0516101c05180821015610c9457600080fd5b8082039050905061022052610cc5565b6101c0516101e05180821015610cb957600080fd5b80820390509050610220525b61022051610200518082028215828483041417610ce157600080fd5b809050905090506101c0518080610cf757600080fd5b82049050905060005260206000f350005b634515cef360005114156117605762ffffff5415610d2557600080fd5b600162ffffff55600f5415610d3957600080fd5b6060366101403760025460038082028215828483041417610d5957600080fd5b809050905090506008808204905090506101a0526003546101c0526101405161016051610180516101a0516101c0516101e05160065801610026565b610200526101e0526101c0526101a052610180526101605261014052610200516101e052602061028060046318160ddd6102205261023c6005545afa610dda57600080fd5b601f3d11610de757600080fd5b600050610280516102005260006102205260018060c052602060c020546102405260018160c052602060c02001546102605260028160c052602060c020015461028052506000610200511115610ed5576101405161016051610180516101a0516101c0516101e0516102005161022051610240516102605161028051610240516102a052610260516102c052610280516102e0526101e05161030052610300516102e0516102c0516102a0516006580161070d565b6103605261028052610260526102405261022052610200526101e0526101c0526101a05261018052610160526101405261036051610220525b610240516102a052610260516102c052610280516102e05261030060006003818352015b60046103005160038110610f0c57600080fd5b602002013561032052610200511515610f305760006103205111610f2f57600080fd5b5b6103005160038110610f4157600080fd5b600060c052602060c0200154610340526000610320511115611172576002610300511415610fa95760206103e060246370a0823161036052306103805261037c610340515afa610f9057600080fd5b601f3d11610f9d57600080fd5b6000506103e051610320525b600060046103c0527f23b872dd000000000000000000000000000000000000000000000000000000006103e0526103c060048060208461042001018260208501600060045af150508051820191505033602082610420010152602081019050306020826104200101526020810190506004610300516003811061102b57600080fd5b6020020135602082610420010152602081019050806104205261042090508051602001806104e08284600060045af161106357600080fd5b505060206105c06104e0516105006000610340515af161108257600080fd5b60203d808211156110935780611095565b815b905090506105a0526105a08051602001806103608284600060045af16110ba57600080fd5b5050600061036051111561110d576103608060200151600082518060209013156110e357600080fd5b80919012156110f157600080fd5b806020036101000a8204905090509050151561110c57600080fd5b5b600261030051141561117157602061044060246370a082316103c052306103e0526103dc610340515afa61114057600080fd5b601f3d1161114d57600080fd5b60005061044051610320518082101561116557600080fd5b80820390509050610320525b5b610240610300516003811061118657600080fd5b60200201516103205181818301101561119e57600080fd5b808201905090506102a061030051600381106111b957600080fd5b60200201525b8151600101808352811415610ef9575b50506101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e051610300516102a051610320526102c051610340526102e051610360526101e05161038052610380516103605161034051610320516006580161070d565b6103e052610300526102e0526102c0526102a05261028052610260526102405261022052610200526101e0526101c0526101a0526101805261016052610140526103e051610300526102205161030051116112a057600080fd5b610300516103205260006102005111156115a95761034060006003818352015b6103005161024061034051600381106112d857600080fd5b602002015180820282158284830414176112f157600080fd5b8090509050905061022051808061130757600080fd5b820490509050610360526000610380526102a0610340516003811061132b57600080fd5b602002015161036051111561137457610360516102a0610340516003811061135257600080fd5b60200201518082101561136457600080fd5b80820390509050610380526113aa565b6102a0610340516003811061138857600080fd5b6020020151610360518082101561139e57600080fd5b80820390509050610380525b6101a0516103805180820282158284830414176113c657600080fd5b809050905090506402540be4008082049050905061014061034051600381106113ee57600080fd5b60200201526102a0610340516003811061140757600080fd5b6020020151610140610340516003811061142057600080fd5b60200201516101c051808202821582848304141761143d57600080fd5b809050905090506402540be400808204905090508082101561145e57600080fd5b80820390509050610340516003811061147657600080fd5b600160c052602060c02001556102a0610340516003811061149657600080fd5b60200201805161014061034051600381106114b057600080fd5b6020020151808210156114c257600080fd5b808203905090508152505b81516001018083528114156112c0575b50506101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e05161030051610320516102a051610340526102c051610360526102e051610380526101e0516103a0526103a0516103805161036051610340516006580161070d565b6104005261032052610300526102e0526102c0526102a05261028052610260526102405261022052610200526101e0526101c0526101a05261018052610160526101405261040051610320526115cd565b600160c052602060c0206102a05181556102c05160018201556102e0516002820155505b6000610340526102005115156115ea57610300516103405261163f565b6102005161032051610220518082101561160357600080fd5b80820390509050808202821582848304141761161e57600080fd5b8090509050905061022051808061163457600080fd5b820490509050610340525b6064356103405110151515611693576308c379a06103605260206103805260146103a0527f536c697070616765207363726577656420796f750000000000000000000000006103c0526103a050606461037cfd5b602061040060446340c10f19610360523361038052610340516103a05261037c60006005545af16116c357600080fd5b601f3d116116d057600080fd5b6000506104005060043561036052602435610380526044356103a052610140516103c052610160516103e05261018051610400526103005161042052610200516103405181818301101561172357600080fd5b8082019050905061044052337f423f6495a08fc652425cf4ed0d1f9e37e571d9b9529b1c1c23cce780b2e7df0d610100610360a2600062ffffff55005b600015611bc2575b610200526101405261016052610180526101a0526101c0526101e05261016051610140511861179657600080fd5b60006101605112156117a757600080fd5b600361016051126117b757600080fd5b60006101405112156117c857600080fd5b600361014051126117d857600080fd5b6101405161016051610180516101a0516101c0516101e051610200516102205160065801610026565b6102405261022052610200526101e0526101c0526101a05261018052610160526101405261024051610220526101405161016051610180516101a0516101c0516101e0516102005161022051610240516101a051610260526101c051610280526101e0516102a052610220516102c0526102c0516102a05161028051610260516006580161041f565b610320526102405261022052610200526101e0526101c0526101a0526101805261016052610140526103205161024052610240516102605260006102805261022051600380820282158284830414176118e257600080fd5b809050905090506102a05260006102c0526102e060006003818352015b610140516102e051141561191a57610180516102c052611950565b610160516102e051181561194a576101a06102e0516003811061193c57600080fd5b60200201516102c05261194f565b6119cc565b5b61028080516102c05181818301101561196857600080fd5b808201905090508152506102605161024051808202821582848304141761198e57600080fd5b809050905090506102c051600380820282158284830414176119af57600080fd5b8090509050905080806119c157600080fd5b820490509050610260525b81516001018083528114156118ff575b5050610260516102405180820282158284830414176119fa57600080fd5b809050905090506102a05160038082028215828483041417611a1b57600080fd5b809050905090508080611a2d57600080fd5b8204905090506102605261028051610240516102a0518080611a4e57600080fd5b820490509050818183011015611a6357600080fd5b808201905090506102e0526000610300526102405161032052610340600060ff818352015b610320516103005261032051610320518082028215828483041417611aac57600080fd5b8090509050905061026051818183011015611ac657600080fd5b808201905090506002610320518082028215828483041417611ae757600080fd5b809050905090506102e051818183011015611b0157600080fd5b808201905090506102405180821015611b1957600080fd5b808203905090508080611b2b57600080fd5b8204905090506103205261030051610320511115611b72576001610320516103005180821015611b5a57600080fd5b80820390509050111515611b6d57611bae565b611b9d565b6001610300516103205180821015611b8957600080fd5b80820390509050111515611b9c57611bae565b5b5b8151600101808352811415611a88575b505061032051600052600051610200515650005b635e0d443f6000511415611ea65760043580806000811215611be057195b607f1c15611bed57600080fd5b90505060243580806000811215611c0057195b607f1c15611c0d57600080fd5b905050670de0b6b3a7640000610140526c0c9f2c9cd04674edea40000000610160526c0c9f2c9cd04674edea40000000610180526101405161016051610180516101a0516101c0516101e051600658016101f3565b6102005261022052610240526101e0526101c0526101a05261018052610160526101405261020080516101a05280602001516101c05280604001516101e052506101a060043560038110611cb557600080fd5b602002015160443561014060043560038110611cd057600080fd5b60200201518082028215828483041417611ce957600080fd5b80905090509050670de0b6b3a764000080820490509050818183011015611d0f57600080fd5b80820190509050610200526101405161016051610180516101a0516101c0516101e0516102005161022051600435610240526024356102605261020051610280526101a0516102a0526101c0516102c0526101e0516102e0526102e0516102c0516102a05161028051610260516102405160065801611768565b6103405261022052610200526101e0526101c0526101a05261018052610160526101405261034051610220526101a060243560038110611dc857600080fd5b60200201516102205180821015611dde57600080fd5b80820390509050600180821015611df457600080fd5b80820390509050670de0b6b3a76400008082028215828483041417611e1857600080fd5b8090509050905061014060243560038110611e3257600080fd5b60200201518080611e4257600080fd5b82049050905061024052600254610240518082028215828483041417611e6757600080fd5b809050905090506402540be4008082049050905061026052610240516102605180821015611e9457600080fd5b8082039050905060005260206000f350005b6307211ef760005114156121275760043580806000811215611ec457195b607f1c15611ed157600080fd5b90505060243580806000811215611ee457195b607f1c15611ef157600080fd5b905050610140516101605161018051600658016101f3565b6101a0526101c0526101e0526101805261016052610140526101a08051610140528060200151610160528060400151610180525060016101a05264e8d4a510006101c05264e8d4a510006101e05261014060043560038110611f6a57600080fd5b60200201516044356101a060043560038110611f8557600080fd5b60200201518082028215828483041417611f9e57600080fd5b80905090509050818183011015611fb457600080fd5b80820190509050610200526101405161016051610180516101a0516101c0516101e051610200516102205160043561024052602435610260526102005161028052610140516102a052610160516102c052610180516102e0526102e0516102c0516102a05161028051610260516102405160065801611768565b6103405261022052610200526101e0526101c0526101a05261018052610160526101405261034051610220526101406024356003811061206d57600080fd5b6020020151610220518082101561208357600080fd5b8082039050905060018082101561209957600080fd5b808203905090506101a0602435600381106120b357600080fd5b602002015180806120c357600080fd5b820490509050610240526002546102405180820282158284830414176120e857600080fd5b809050905090506402540be400808204905090506102605261024051610260518082101561211557600080fd5b8082039050905060005260206000f350005b633df021246000511415612a545762ffffff541561214457600080fd5b600162ffffff556004358080600081121561215b57195b607f1c1561216857600080fd5b9050506024358080600081121561217b57195b607f1c1561218857600080fd5b905050600f541561219857600080fd5b670de0b6b3a7640000610140526c0c9f2c9cd04674edea40000000610160526c0c9f2c9cd04674edea400000006101805260018060c052602060c020546101a05260018160c052602060c02001546101c05260028160c052602060c02001546101e052506101405161016051610180516101a0516101c0516101e0516102005161022051610240516101a051610260526101c051610280526101e0516102a0526102a051610280516102605160065801610305565b6103005261032052610340526102405261022052610200526101e0526101c0526101a0526101805261016052610140526103008051610200528060200151610220528060400151610240525060443561026052600435600381106122b057600080fd5b600060c052602060c0200154610280526002600435141561230b57602061032060246370a082316102a052306102c0526102bc610280515afa6122f257600080fd5b601f3d116122ff57600080fd5b60005061032051610260525b60006004610300527f23b872dd000000000000000000000000000000000000000000000000000000006103205261030060048060208461036001018260208501600060045af15050805182019150503360208261036001015260208101905030602082610360010152602081019050604435602082610360010152602081019050806103605261036090508051602001806104208284600060045af16123b057600080fd5b50506020610500610420516104406000610280515af16123cf57600080fd5b60203d808211156123e057806123e2565b815b905090506104e0526104e08051602001806102a08284600060045af161240757600080fd5b505060006102a051111561245a576102a080602001516000825180602090131561243057600080fd5b809190121561243e57600080fd5b806020036101000a8204905090509050151561245957600080fd5b5b600260043514156124bd57602061038060246370a0823161030052306103205261031c610280515afa61248c57600080fd5b601f3d1161249957600080fd5b6000506103805161026051808210156124b157600080fd5b80820390509050610260525b610200600435600381106124d057600080fd5b602002015161026051610140600435600381106124ec57600080fd5b6020020151808202821582848304141761250557600080fd5b80905090509050670de0b6b3a76400008082049050905081818301101561252b57600080fd5b80820190509050610300526101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e051610300516103205160043561034052602435610360526103005161038052610200516103a052610220516103c052610240516103e0526103e0516103c0516103a05161038051610360516103405160065801611768565b6104405261032052610300526102e0526102c0526102a05261028052610260526102405261022052610200526101e0526101c0526101a05261018052610160526101405261044051610320526102006024356003811061262457600080fd5b6020020151610320518082101561263a57600080fd5b8082039050905060018082101561265057600080fd5b808203905090506103405261034051600254808202821582848304141761267657600080fd5b809050905090506402540be40080820490509050610360526103405161036051808210156126a357600080fd5b80820390509050670de0b6b3a764000080820282158284830414176126c757600080fd5b80905090509050610140602435600381106126e157600080fd5b602002015180806126f157600080fd5b820490509050610340526064356103405110151515612774576308c379a06103805260206103a052602e6103c0527f45786368616e676520726573756c74656420696e20666577657220636f696e736103e0527f207468616e206578706563746564000000000000000000000000000000000000610400526103c050608461039cfd5b61036051600354808202821582848304141761278f57600080fd5b809050905090506402540be400808204905090506103805261038051670de0b6b3a764000080820282158284830414176127c857600080fd5b80905090509050610140602435600381106127e257600080fd5b602002015180806127f257600080fd5b820490509050610380526101a06004356003811061280f57600080fd5b60200201516102605181818301101561282757600080fd5b808201905090506004356003811061283e57600080fd5b600160c052602060c02001556101a06024356003811061285d57600080fd5b6020020151610340518082101561287357600080fd5b80820390509050610380518082101561288b57600080fd5b80820390509050602435600381106128a257600080fd5b600160c052602060c0200155600060046103a0527fa9059cbb000000000000000000000000000000000000000000000000000000006103c0526103a060048060208461040001018260208501600060045af15050805182019150503360208261040001015260208101905061034051602082610400010152602081019050806104005261040090508051602001806104a08284600060045af161294457600080fd5b505060206105606104a0516104c060006024356003811061296457600080fd5b600060c052602060c02001545af161297b57600080fd5b60203d8082111561298c578061298e565b815b90509050610540526105408051602001806102a08284600060045af16129b357600080fd5b505060006102a0511115612a06576102a08060200151600082518060209013156129dc57600080fd5b80919012156129ea57600080fd5b806020036101000a82049050905090501515612a0557600080fd5b5b6004356103a0526044356103c0526024356103e0526103405161040052337f8b3e96f2b889fa771c53c981b40daf005f63f637f1869f707052d15a3dd9714060806103a0a2600062ffffff55005b63ecb586a56000511415612e2b5762ffffff5415612a7157600080fd5b600162ffffff5560206101c060046318160ddd6101605261017c6005545afa612a9957600080fd5b601f3d11612aa657600080fd5b6000506101c0516101405260c0366101603761022060006003818352015b6102205160038110612ad557600080fd5b600160c052602060c02001546004358082028215828483041417612af857600080fd5b80905090509050610140518080612b0e57600080fd5b8204905090506102405260246102205160038110612b2b57600080fd5b60200201356102405110151515612ba6576308c379a06102605260206102805260306102a0527f5769746864726177616c20726573756c74656420696e20666577657220636f696102c0527f6e73207468616e206578706563746564000000000000000000000000000000006102e0526102a050608461027cfd5b6102205160038110612bb757600080fd5b600160c052602060c0200180546102405180821015612bd557600080fd5b80820390509050815550610240516101606102205160038110612bf757600080fd5b6020020152600060046102c0527fa9059cbb000000000000000000000000000000000000000000000000000000006102e0526102c060048060208461032001018260208501600060045af15050805182019150503360208261032001015260208101905061024051602082610320010152602081019050806103205261032090508051602001806103c08284600060045af1612c9257600080fd5b505060206104806103c0516103e060006102205160038110612cb357600080fd5b600060c052602060c02001545af1612cca57600080fd5b60203d80821115612cdb5780612cdd565b815b90509050610460526104608051602001806102608284600060045af1612d0257600080fd5b50506000610260511115612d5557610260806020015160008251806020901315612d2b57600080fd5b8091901215612d3957600080fd5b806020036101000a82049050905090501515612d5457600080fd5b5b5b8151600101808352811415612ac4575b505060206102c060446379cc67906102205233610240526004356102605261023c60006005545af1612d9757600080fd5b601f3d11612da457600080fd5b6000506102c050610160516102205261018051610240526101a051610260526101c051610280526101e0516102a052610200516102c0526101405160043580821015612def57600080fd5b808203905090506102e052337fa49d4cf02656aebf8c771f5a8585638a2a15ee6c97cf7205d4208ed7c1df252d60e0610220a2600062ffffff55005b639fdaea0c600051141561374a5762ffffff5415612e4857600080fd5b600162ffffff55600f5415612e5c57600080fd5b60206101c060046318160ddd6101605261017c6005545afa612e7d57600080fd5b601f3d11612e8a57600080fd5b6000506101c0516101405260006101405118612ea557600080fd5b60025460038082028215828483041417612ebe57600080fd5b8090509050905060088082049050905061016052600354610180526101405161016051610180516101a05160065801610026565b6101c0526101a0526101805261016052610140526101c0516101a05260018060c052602060c020546101c05260018160c052602060c02001546101e05260028160c052602060c020015461020052506101c051610220526101e0516102405261020051610260526101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516101c0516102a0526101e0516102c052610200516102e0526101a05161030052610300516102e0516102c0516102a0516006580161070d565b6103605261028052610260526102405261022052610200526101e0526101c0526101a05261018052610160526101405261036051610280526102a060006003818352015b6102206102a0516003811061301657600080fd5b60200201805160046102a0516003811061302f57600080fd5b60200201358082101561304157600080fd5b808203905090508152505b8151600101808352811415613002575b50506101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a051610220516102c052610240516102e05261026051610300526101a0516103205261032051610300516102e0516102c0516006580161070d565b610380526102a05261028052610260526102405261022052610200526101e0526101c0526101a052610180526101605261014052610380516102a0526060366102c03761032060006003818352015b6102a0516101c0610320516003811061312e57600080fd5b6020020151808202821582848304141761314757600080fd5b8090509050905061028051808061315d57600080fd5b82049050905061034052600061036052610220610320516003811061318157600080fd5b60200201516103405111156131ca576103405161022061032051600381106131a857600080fd5b6020020151808210156131ba57600080fd5b8082039050905061036052613200565b61022061032051600381106131de57600080fd5b602002015161034051808210156131f457600080fd5b80820390509050610360525b6101605161036051808202821582848304141761321c57600080fd5b809050905090506402540be400808204905090506102c0610320516003811061324457600080fd5b6020020152610220610320516003811061325d57600080fd5b60200201516102c0610320516003811061327657600080fd5b602002015161018051808202821582848304141761329357600080fd5b809050905090506402540be40080820490509050808210156132b457600080fd5b8082039050905061032051600381106132cc57600080fd5b600160c052602060c020015561022061032051600381106132ec57600080fd5b6020020180516102c0610320516003811061330657600080fd5b60200201518082101561331857600080fd5b808203905090508152505b8151600101808352811415613116575b50506101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e05161030051610320516102205161034052610240516103605261026051610380526101a0516103a0526103a0516103805161036051610340516006580161070d565b6104005261032052610300526102e0526102c0526102a05261028052610260526102405261022052610200526101e0526101c0526101a052610180526101605261014052610400516103205261028051610320518082101561340f57600080fd5b8082039050905061014051808202821582848304141761342e57600080fd5b8090509050905061028051808061344457600080fd5b820490509050610340526000610340511861345e57600080fd5b6103408051600181818301101561347457600080fd5b8082019050905081525060643561034051111515156134d2576308c379a06103605260206103805260146103a0527f536c697070616765207363726577656420796f750000000000000000000000006103c0526103a050606461037cfd5b602061040060446379cc6790610360523361038052610340516103a05261037c60006005545af161350257600080fd5b601f3d1161350f57600080fd5b6000506104005061036060006003818352015b60006004610360516003811061353757600080fd5b602002013518156136b057600060046103e0527fa9059cbb00000000000000000000000000000000000000000000000000000000610400526103e060048060208461044001018260208501600060045af150508051820191505033602082610440010152602081019050600461036051600381106135b457600080fd5b6020020135602082610440010152602081019050806104405261044090508051602001806104e08284600060045af16135ec57600080fd5b505060206105a06104e0516105006000610360516003811061360d57600080fd5b600060c052602060c02001545af161362457600080fd5b60203d808211156136355780613637565b815b90509050610580526105808051602001806103808284600060045af161365c57600080fd5b505060006103805111156136af5761038080602001516000825180602090131561368557600080fd5b809190121561369357600080fd5b806020036101000a820490509050905015156136ae57600080fd5b5b5b5b8151600101808352811415613522575b505060043561036052602435610380526044356103a0526102c0516103c0526102e0516103e05261030051610400526102a0516104205261014051610340518082101561370d57600080fd5b8082039050905061044052337f173599dbf9c6ca6f7c3b590df07ae98a45d74ff54065505141e7de6c46a624c2610100610360a2600062ffffff55005b600015613a7b575b610200526101405261016052610180526101a0526101c0526101e052600061016051121561377f57600080fd5b6003610160511261378f57600080fd5b6101e0516102205260006102405261014051600380820282158284830414176137b757600080fd5b80905090509050610260526000610280526102a060006003818352015b610160516102a0511815613804576101806102a051600381106137f657600080fd5b602002015161028052613809565b613885565b61024080516102805181818301101561382157600080fd5b80820190509050815250610220516101e051808202821582848304141761384757600080fd5b80905090509050610280516003808202821582848304141761386857600080fd5b80905090509050808061387a57600080fd5b820490509050610220525b81516001018083528114156137d4575b5050610220516101e05180820282158284830414176138b357600080fd5b8090509050905061026051600380820282158284830414176138d457600080fd5b8090509050905080806138e657600080fd5b82049050905061022052610240516101e05161026051808061390757600080fd5b82049050905081818301101561391c57600080fd5b808201905090506102a05260006102c0526101e0516102e052610300600060ff818352015b6102e0516102c0526102e0516102e051808202821582848304141761396557600080fd5b809050905090506102205181818301101561397f57600080fd5b8082019050905060026102e05180820282158284830414176139a057600080fd5b809050905090506102a0518181830110156139ba57600080fd5b808201905090506101e051808210156139d257600080fd5b8082039050905080806139e457600080fd5b8204905090506102e0526102c0516102e0511115613a2b5760016102e0516102c05180821015613a1357600080fd5b80820390509050111515613a2657613a67565b613a56565b60016102c0516102e05180821015613a4257600080fd5b80820390509050111515613a5557613a67565b5b5b8151600101808352811415613941575b50506102e051600052600051610200515650005b600015614124575b6101805261014052610160526101405161016051610180516101a05160065801610026565b6101c0526101a0526101805261016052610140526101c0516101a05260025460038082028215828483041417613add57600080fd5b809050905090506008808204905090506101c05260016101e05264e8d4a510006102005264e8d4a510006102205260206102c060046318160ddd6102605261027c6005545afa613b2c57600080fd5b601f3d11613b3957600080fd5b6000506102c051610240526101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a051600658016101f3565b6102c0526102e052610300526102a05261028052610260526102405261022052610200526101e0526101c0526101a0526101805261016052610140526102c080516102605280602001516102805280604001516102a052506101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c051610260516102e05261028051610300526102a051610320526101a051610340526103405161032051610300516102e0516006580161041f565b6103a0526102c0526102a05261028052610260526102405261022052610200526101e0526101c0526101a0526101805261016052610140526103a0516102c0526102c051610140516102c0518082028215828483041417613ca257600080fd5b80905090509050610240518080613cb857600080fd5b82049050905080821015613ccb57600080fd5b808203905090506102e052610260516103005261028051610320526102a05161034052610140610380525b61038051516020610380510161038052610380610380511015613d1857613cf6565b6101a0516103a052610160516103c052610260516103e05261028051610400526102a051610420526102e051610440526104405161042051610400516103e0516103c0516103a05160065801613752565b6104a052610360610380525b6103805152602061038051036103805261014061038051101515613d9857613d75565b6104a051610360526102606101605160038110613db457600080fd5b60200201516103605180821015613dca57600080fd5b808203905090506101e06101605160038110613de557600080fd5b60200201518080613df557600080fd5b820490509050610380526103a060006003818352015b60006103c052610160516103a0511415613e8d576102606103a05160038110613e3357600080fd5b60200201516102e0518082028215828483041417613e5057600080fd5b809050905090506102c0518080613e6657600080fd5b8204905090506103605180821015613e7d57600080fd5b808203905090506103c052613f0c565b6102606103a05160038110613ea157600080fd5b60200201516102606103a05160038110613eba57600080fd5b60200201516102e0518082028215828483041417613ed757600080fd5b809050905090506102c0518080613eed57600080fd5b82049050905080821015613f0057600080fd5b808203905090506103c0525b6103006103a05160038110613f2057600080fd5b6020020180516101c0516103c0518082028215828483041417613f4257600080fd5b809050905090506402540be4008082049050905080821015613f6357600080fd5b808203905090508152505b8151600101808352811415613e0b575b50506103006101605160038110613f9457600080fd5b60200201516101406103c0525b6103c0515160206103c051016103c0526103c06103c0511015613fc357613fa1565b6101a0516103e05261016051610400526103005161042052610320516104405261034051610460526102e0516104805261048051610460516104405161042051610400516103e05160065801613752565b6104e0526103a06103c0525b6103c0515260206103c051036103c0526101406103c05110151561404357614020565b6104e0518082101561405457600080fd5b808203905090506103a0526103a05160018082101561407257600080fd5b808203905090506101e0610160516003811061408d57600080fd5b6020020151808061409d57600080fd5b8204905090506103a0526103c08080806103a051815250506020810190508080610380516103a051808210156140d257600080fd5b808203905090508152505060409050905060c05260c051610400525b6000610400511115156141005761411c565b602061040051036103c0015160206104005103610400526140ee565b610180515650005b63cc2b27d760005114156141a8576024358080600081121561414257195b607f1c1561414f57600080fd5b9050506004356101405260243561016052610160516101405160065801613a83565b6101c0526101e0526101c080808080516102005250506020810190508080805161022052505050506102005160005260206000f350005b631a4d01d260005114156145165762ffffff54156141c557600080fd5b600162ffffff55602435808060008112156141dc57195b607f1c156141e957600080fd5b905050600f54156141f957600080fd5b604036610140376101405161016051600435610180526024356101a0526101a0516101805160065801613a83565b6102005261022052610160526101405261020080808080516102405250506020810190508080805161026052505050506102408051610140528060200151610160525060443561014051101515156142be576308c379a06101805260206101a05260186101c0527f4e6f7420656e6f75676820636f696e732072656d6f76656400000000000000006101e0526101c050606461019cfd5b602435600381106142ce57600080fd5b600160c052602060c020018054610140516101605160035480820282158284830414176142fa57600080fd5b809050905090506402540be4008082049050905081818301101561431d57600080fd5b808201905090508082101561433157600080fd5b80820390509050815550602061022060446379cc679061018052336101a0526004356101c05261019c60006005545af161436a57600080fd5b601f3d1161437757600080fd5b60005061022050600060046101e0527fa9059cbb00000000000000000000000000000000000000000000000000000000610200526101e060048060208461024001018260208501600060045af15050805182019150503360208261024001015260208101905061014051602082610240010152602081019050806102405261024090508051602001806102e08284600060045af161441457600080fd5b505060206103a06102e05161030060006024356003811061443457600080fd5b600060c052602060c02001545af161444b57600080fd5b60203d8082111561445c578061445e565b815b90509050610380526103808051602001806101808284600060045af161448357600080fd5b505060006101805111156144d6576101808060200151600082518060209013156144ac57600080fd5b80919012156144ba57600080fd5b806020036101000a820490509050905015156144d557600080fd5b5b6004356101e0526101405161020052337f9e96dd3b997a2a257eec4df9bb6eaf626e206df5f543bd963682d143300be31060406101e0a2600062ffffff55005b633c157e6460005114156146ae57600454331461453257600080fd5b6008546201518081818301101561454857600080fd5b8082019050905042101561455b57600080fd5b426201518081818301101561456f57600080fd5b80820190509050602435101561458457600080fd5b6101405160065801610026565b61016052610140526101605161014052600060043511156145b957620f4240600435106145bc565b60005b6145c557600080fd5b610140516004351015156145fe5761014051600a80820282158284830414176145ed57600080fd5b809050905090506004351115614601565b60005b1561460d576001614649565b6101405160043510156146455761014051600435600a808202821582848304141761463757600080fd5b809050905090501015614648565b60005b5b5b61465357600080fd5b6101405160065560043560075542600855602435600955610140516101605260043561018052426101a0526024356101c0527fa2b71ec6df949300b59aab36b55e189697b750119dd349fcfa8c0f779e83c2546080610160a1005b63551a658860005114156147335760045433146146ca57600080fd5b6101405160065801610026565b6101605261014052610160516101405261014051600655610140516007554260085542600955610140516101605242610180527f46e22fb3709ad289f62ce63d469248536dbc78d82b84a3d7e74ad606dc2019386040610160a1005b635b5a146760005114156147f157600454331461474f57600080fd5b600a541561475c57600080fd5b64012a05f200600435111561477057600080fd5b6402540be400602435111561478457600080fd5b426203f48081818301101561479857600080fd5b808201905090506101405261014051600a55600435600c55602435600d556004356101605260243561018052610140517f351fc5da2fbf480f2225debf3664a4bc90fa9923743aad58b4603f648e931fe06040610160a2005b634f12fe97600051141561488557600454331461480d57600080fd5b600a5442101561481c57600080fd5b6000600a541861482b57600080fd5b6000600a55600c5461014052600d546101605261014051600255610160516003556101405161018052610160516101a0527fbe12859b636aed607d5230b2cc2711f68d70e51060e6cca1f575ef5d2fcc95d16040610180a1005b63226840fb60005114156148a85760045433146148a157600080fd5b6000600a55005b636b441a40600051141561493c5760043560a01c156148c657600080fd5b60045433146148d457600080fd5b600b54156148e157600080fd5b426203f4808181830110156148f557600080fd5b808201905090506101405261014051600b55600435600e55600435610140517f181aa3aa17d4cbf99265dd4443eba009433d3cde79d60164fde1d1a192beb93560006000a3005b636a1c05ae60005114156149b557600454331461495857600080fd5b600b5442101561496757600080fd5b6000600b541861497657600080fd5b6000600b55600e546101405261014051600455610140517f71614071b88dee5e0b2ae578a9dd7b2ebbe9ae832ba419dc0242cd065a290b6c60006000a2005b6386fbf19360005114156149d85760045433146149d157600080fd5b6000600b55005b63e2e7d2646000511415614a745760206101c060246370a0823161014052306101605261015c60043560038110614a0e57600080fd5b600060c052602060c02001545afa614a2557600080fd5b601f3d11614a3257600080fd5b6000506101c05160043560038110614a4957600080fd5b600160c052602060c020015480821015614a6257600080fd5b8082039050905060005260206000f350005b6330c540856000511415614c8f576004543314614a9057600080fd5b61014060006003818352015b6101405160038110614aad57600080fd5b600060c052602060c020015461016052602061022060246370a082316101a052306101c0526101bc610160515afa614ae457600080fd5b601f3d11614af157600080fd5b600050610220516101405160038110614b0957600080fd5b600160c052602060c020015480821015614b2257600080fd5b80820390509050610180526000610180511115614c7a5760006004610200527fa9059cbb000000000000000000000000000000000000000000000000000000006102205261020060048060208461026001018260208501600060045af15050805182019150503360208261026001015260208101905061018051602082610260010152602081019050806102605261026090508051602001806103008284600060045af1614bcf57600080fd5b505060206103c0610300516103206000610160515af1614bee57600080fd5b60203d80821115614bff5780614c01565b815b905090506103a0526103a08051602001806101a08284600060045af1614c2657600080fd5b505060006101a0511115614c79576101a0806020015160008251806020901315614c4f57600080fd5b8091901215614c5d57600080fd5b806020036101000a82049050905090501515614c7857600080fd5b5b5b5b8151600101808352811415614a9c575b5050005b63524c39016000511415614d3d576004543314614cab57600080fd5b61014060006003818352015b60206101e060246370a0823161016052306101805261017c6101405160038110614ce057600080fd5b600060c052602060c02001545afa614cf757600080fd5b601f3d11614d0457600080fd5b6000506101e0516101405160038110614d1c57600080fd5b600160c052602060c02001555b8151600101808352811415614cb7575b5050005b63e36988536000511415614d6e576004543314614d5957600080fd5b4260105411614d6757600080fd5b6001600f55005b633046f9726000511415614d91576004543314614d8a57600080fd5b6000600f55005b63c66106576000511415614dc65760043560038110614daf57600080fd5b600060c052602060c020015460005260206000f350005b634903b0d16000511415614dfb5760043560038110614de457600080fd5b600160c052602060c020015460005260206000f350005b63ddca3f436000511415614e175760025460005260206000f350005b63fee3f7f96000511415614e335760035460005260206000f350005b638da5cb5b6000511415614e4f5760045460005260206000f350005b635409491a6000511415614e6b5760065460005260206000f350005b63b4b577ad6000511415614e875760075460005260206000f350005b632081066c6000511415614ea35760085460005260206000f350005b63140522886000511415614ebf5760095460005260206000f350005b63405e28f86000511415614edb57600a5460005260206000f350005b63e0a0b5866000511415614ef757600b5460005260206000f350005b6358680d0b6000511415614f1357600c5460005260206000f350005b63e38244626000511415614f2f57600d5460005260206000f350005b631ec0cdc16000511415614f4b57600e5460005260206000f350005b5b60006000fd",
  "source": "# @version 0.2.7\r\n# (c) Curve.Fi, 2020\r\n# Pool for DAI/USDC/USDT\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\ninterface CurveToken:\r\n    def totalSupply() -> uint256: view\r\n    def mint(_to: address, _value: uint256) -> bool: nonpayable\r\n    def burnFrom(_to: address, _value: uint256) -> bool: nonpayable\r\n\r\n\r\n# Events\r\nevent TokenExchange:\r\n    buyer: indexed(address)\r\n    sold_id: int128\r\n    tokens_sold: uint256\r\n    bought_id: int128\r\n    tokens_bought: uint256\r\n\r\n\r\nevent AddLiquidity:\r\n    provider: indexed(address)\r\n    token_amounts: uint256[N_COINS]\r\n    fees: uint256[N_COINS]\r\n    invariant: uint256\r\n    token_supply: uint256\r\n\r\nevent RemoveLiquidity:\r\n    provider: indexed(address)\r\n    token_amounts: uint256[N_COINS]\r\n    fees: uint256[N_COINS]\r\n    token_supply: uint256\r\n\r\nevent RemoveLiquidityOne:\r\n    provider: indexed(address)\r\n    token_amount: uint256\r\n    coin_amount: uint256\r\n\r\nevent RemoveLiquidityImbalance:\r\n    provider: indexed(address)\r\n    token_amounts: uint256[N_COINS]\r\n    fees: uint256[N_COINS]\r\n    invariant: uint256\r\n    token_supply: uint256\r\n\r\nevent CommitNewAdmin:\r\n    deadline: indexed(uint256)\r\n    admin: indexed(address)\r\n\r\nevent NewAdmin:\r\n    admin: indexed(address)\r\n\r\n\r\nevent CommitNewFee:\r\n    deadline: indexed(uint256)\r\n    fee: uint256\r\n    admin_fee: uint256\r\n\r\nevent NewFee:\r\n    fee: uint256\r\n    admin_fee: uint256\r\n\r\nevent RampA:\r\n    old_A: uint256\r\n    new_A: uint256\r\n    initial_time: uint256\r\n    future_time: uint256\r\n\r\nevent StopRampA:\r\n    A: uint256\r\n    t: uint256\r\n\r\n\r\n# This can (and needs to) be changed at compile time\r\nN_COINS: constant(int128) = 3  # <- change\r\n\r\nFEE_DENOMINATOR: constant(uint256) = 10 ** 10\r\nLENDING_PRECISION: constant(uint256) = 10 ** 18\r\nPRECISION: constant(uint256) = 10 ** 18  # The precision to convert to\r\nPRECISION_MUL: constant(uint256[N_COINS]) = [1, 1000000000000, 1000000000000]\r\nRATES: constant(uint256[N_COINS]) = [1000000000000000000, 1000000000000000000000000000000, 1000000000000000000000000000000]\r\nFEE_INDEX: constant(int128) = 2  # Which coin may potentially have fees (USDT)\r\n\r\nMAX_ADMIN_FEE: constant(uint256) = 10 * 10 ** 9\r\nMAX_FEE: constant(uint256) = 5 * 10 ** 9\r\nMAX_A: constant(uint256) = 10 ** 6\r\nMAX_A_CHANGE: constant(uint256) = 10\r\n\r\nADMIN_ACTIONS_DELAY: constant(uint256) = 3 * 86400\r\nMIN_RAMP_TIME: constant(uint256) = 86400\r\n\r\ncoins: public(address[N_COINS])\r\nbalances: public(uint256[N_COINS])\r\nfee: public(uint256)  # fee * 1e10\r\nadmin_fee: public(uint256)  # admin_fee * 1e10\r\n\r\nowner: public(address)\r\ntoken: CurveToken\r\n\r\ninitial_A: public(uint256)\r\nfuture_A: public(uint256)\r\ninitial_A_time: public(uint256)\r\nfuture_A_time: public(uint256)\r\n\r\nadmin_actions_deadline: public(uint256)\r\ntransfer_ownership_deadline: public(uint256)\r\nfuture_fee: public(uint256)\r\nfuture_admin_fee: public(uint256)\r\nfuture_owner: public(address)\r\n\r\nis_killed: bool\r\nkill_deadline: uint256\r\nKILL_DEADLINE_DT: constant(uint256) = 2 * 30 * 86400\r\n\r\n\r\n@external\r\ndef __init__(\r\n    _owner: address,\r\n    _coins: address[N_COINS],\r\n    _pool_token: address,\r\n    _A: uint256,\r\n    _fee: uint256,\r\n    _admin_fee: uint256\r\n):\r\n    \"\"\"\r\n    @notice Contract constructor\r\n    @param _owner Contract owner address\r\n    @param _coins Addresses of ERC20 conracts of coins\r\n    @param _pool_token Address of the token representing LP share\r\n    @param _A Amplification coefficient multiplied by n * (n - 1)\r\n    @param _fee Fee to charge for exchanges\r\n    @param _admin_fee Admin fee\r\n    \"\"\"\r\n    for i in range(N_COINS):\r\n        assert _coins[i] != ZERO_ADDRESS\r\n    self.coins = _coins\r\n    self.initial_A = _A\r\n    self.future_A = _A\r\n    self.fee = _fee\r\n    self.admin_fee = _admin_fee\r\n    self.owner = _owner\r\n    self.kill_deadline = block.timestamp + KILL_DEADLINE_DT\r\n    self.token = CurveToken(_pool_token)\r\n\r\n\r\n@view\r\n@internal\r\ndef _A() -> uint256:\r\n    \"\"\"\r\n    Handle ramping A up or down\r\n    \"\"\"\r\n    t1: uint256 = self.future_A_time\r\n    A1: uint256 = self.future_A\r\n\r\n    if block.timestamp < t1:\r\n        A0: uint256 = self.initial_A\r\n        t0: uint256 = self.initial_A_time\r\n        # Expressions in uint256 cannot have negative numbers, thus \"if\"\r\n        if A1 > A0:\r\n            return A0 + (A1 - A0) * (block.timestamp - t0) / (t1 - t0)\r\n        else:\r\n            return A0 - (A0 - A1) * (block.timestamp - t0) / (t1 - t0)\r\n\r\n    else:  # when t1 == 0 or block.timestamp >= t1\r\n        return A1\r\n\r\n\r\n@view\r\n@external\r\ndef A() -> uint256:\r\n    return self._A()\r\n\r\n\r\n@view\r\n@internal\r\ndef _xp() -> uint256[N_COINS]:\r\n    result: uint256[N_COINS] = RATES\r\n    for i in range(N_COINS):\r\n        result[i] = result[i] * self.balances[i] / LENDING_PRECISION\r\n    return result\r\n\r\n\r\n@pure\r\n@internal\r\ndef _xp_mem(_balances: uint256[N_COINS]) -> uint256[N_COINS]:\r\n    result: uint256[N_COINS] = RATES\r\n    for i in range(N_COINS):\r\n        result[i] = result[i] * _balances[i] / PRECISION\r\n    return result\r\n\r\n\r\n@pure\r\n@internal\r\ndef get_D(xp: uint256[N_COINS], amp: uint256) -> uint256:\r\n    S: uint256 = 0\r\n    for _x in xp:\r\n        S += _x\r\n    if S == 0:\r\n        return 0\r\n\r\n    Dprev: uint256 = 0\r\n    D: uint256 = S\r\n    Ann: uint256 = amp * N_COINS\r\n    for _i in range(255):\r\n        D_P: uint256 = D\r\n        for _x in xp:\r\n            D_P = D_P * D / (_x * N_COINS)  # If division by 0, this will be borked: only withdrawal will work. And that is good\r\n        Dprev = D\r\n        D = (Ann * S + D_P * N_COINS) * D / ((Ann - 1) * D + (N_COINS + 1) * D_P)\r\n        # Equality with the precision of 1\r\n        if D > Dprev:\r\n            if D - Dprev <= 1:\r\n                break\r\n        else:\r\n            if Dprev - D <= 1:\r\n                break\r\n    return D\r\n\r\n\r\n@view\r\n@internal\r\ndef get_D_mem(_balances: uint256[N_COINS], amp: uint256) -> uint256:\r\n    return self.get_D(self._xp_mem(_balances), amp)\r\n\r\n\r\n@view\r\n@external\r\ndef get_virtual_price() -> uint256:\r\n    \"\"\"\r\n    Returns portfolio virtual price (for calculating profit)\r\n    scaled up by 1e18\r\n    \"\"\"\r\n    D: uint256 = self.get_D(self._xp(), self._A())\r\n    # D is in the units similar to DAI (e.g. converted to precision 1e18)\r\n    # When balanced, D = n * x_u - total virtual value of the portfolio\r\n    token_supply: uint256 = self.token.totalSupply()\r\n    return D * PRECISION / token_supply\r\n\r\n\r\n@view\r\n@external\r\ndef calc_token_amount(amounts: uint256[N_COINS], deposit: bool) -> uint256:\r\n    \"\"\"\r\n    Simplified method to calculate addition or reduction in token supply at\r\n    deposit or withdrawal without taking fees into account (but looking at\r\n    slippage).\r\n    Needed to prevent front-running, not for precise calculations!\r\n    \"\"\"\r\n    _balances: uint256[N_COINS] = self.balances\r\n    amp: uint256 = self._A()\r\n    D0: uint256 = self.get_D_mem(_balances, amp)\r\n    for i in range(N_COINS):\r\n        if deposit:\r\n            _balances[i] += amounts[i]\r\n        else:\r\n            _balances[i] -= amounts[i]\r\n    D1: uint256 = self.get_D_mem(_balances, amp)\r\n    token_amount: uint256 = self.token.totalSupply()\r\n    diff: uint256 = 0\r\n    if deposit:\r\n        diff = D1 - D0\r\n    else:\r\n        diff = D0 - D1\r\n    return diff * token_amount / D0\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef add_liquidity(amounts: uint256[N_COINS], min_mint_amount: uint256):\r\n    assert not self.is_killed  # dev: is killed\r\n\r\n    fees: uint256[N_COINS] = empty(uint256[N_COINS])\r\n    _fee: uint256 = self.fee * N_COINS / (4 * (N_COINS - 1))\r\n    _admin_fee: uint256 = self.admin_fee\r\n    amp: uint256 = self._A()\r\n\r\n    token_supply: uint256 = self.token.totalSupply()\r\n    # Initial invariant\r\n    D0: uint256 = 0\r\n    old_balances: uint256[N_COINS] = self.balances\r\n    if token_supply > 0:\r\n        D0 = self.get_D_mem(old_balances, amp)\r\n    new_balances: uint256[N_COINS] = old_balances\r\n\r\n    for i in range(N_COINS):\r\n        in_amount: uint256 = amounts[i]\r\n        if token_supply == 0:\r\n            assert in_amount > 0  # dev: initial deposit requires all coins\r\n        in_coin: address = self.coins[i]\r\n\r\n        # Take coins from the sender\r\n        if in_amount > 0:\r\n            if i == FEE_INDEX:\r\n                in_amount = ERC20(in_coin).balanceOf(self)\r\n\r\n            # \"safeTransferFrom\" which works for ERC20s which return bool or not\r\n            _response: Bytes[32] = raw_call(\r\n                in_coin,\r\n                concat(\r\n                    method_id(\"transferFrom(address,address,uint256)\"),\r\n                    convert(msg.sender, bytes32),\r\n                    convert(self, bytes32),\r\n                    convert(amounts[i], bytes32),\r\n                ),\r\n                max_outsize=32,\r\n            )  # dev: failed transfer\r\n            if len(_response) > 0:\r\n                assert convert(_response, bool)  # dev: failed transfer\r\n\r\n            if i == FEE_INDEX:\r\n                in_amount = ERC20(in_coin).balanceOf(self) - in_amount\r\n\r\n        new_balances[i] = old_balances[i] + in_amount\r\n\r\n    # Invariant after change\r\n    D1: uint256 = self.get_D_mem(new_balances, amp)\r\n    assert D1 > D0\r\n\r\n    # We need to recalculate the invariant accounting for fees\r\n    # to calculate fair user's share\r\n    D2: uint256 = D1\r\n    if token_supply > 0:\r\n        # Only account for fees if we are not the first to deposit\r\n        for i in range(N_COINS):\r\n            ideal_balance: uint256 = D1 * old_balances[i] / D0\r\n            difference: uint256 = 0\r\n            if ideal_balance > new_balances[i]:\r\n                difference = ideal_balance - new_balances[i]\r\n            else:\r\n                difference = new_balances[i] - ideal_balance\r\n            fees[i] = _fee * difference / FEE_DENOMINATOR\r\n            self.balances[i] = new_balances[i] - (fees[i] * _admin_fee / FEE_DENOMINATOR)\r\n            new_balances[i] -= fees[i]\r\n        D2 = self.get_D_mem(new_balances, amp)\r\n    else:\r\n        self.balances = new_balances\r\n\r\n    # Calculate, how much pool tokens to mint\r\n    mint_amount: uint256 = 0\r\n    if token_supply == 0:\r\n        mint_amount = D1  # Take the dust if there was any\r\n    else:\r\n        mint_amount = token_supply * (D2 - D0) / D0\r\n\r\n    assert mint_amount >= min_mint_amount, \"Slippage screwed you\"\r\n\r\n    # Mint pool tokens\r\n    self.token.mint(msg.sender, mint_amount)\r\n\r\n    log AddLiquidity(msg.sender, amounts, fees, D1, token_supply + mint_amount)\r\n\r\n\r\n@view\r\n@internal\r\ndef get_y(i: int128, j: int128, x: uint256, xp_: uint256[N_COINS]) -> uint256:\r\n    # x in the input is converted to the same price/precision\r\n\r\n    assert i != j       # dev: same coin\r\n    assert j >= 0       # dev: j below zero\r\n    assert j < N_COINS  # dev: j above N_COINS\r\n\r\n    # should be unreachable, but good for safety\r\n    assert i >= 0\r\n    assert i < N_COINS\r\n\r\n    amp: uint256 = self._A()\r\n    D: uint256 = self.get_D(xp_, amp)\r\n    c: uint256 = D\r\n    S_: uint256 = 0\r\n    Ann: uint256 = amp * N_COINS\r\n\r\n    _x: uint256 = 0\r\n    for _i in range(N_COINS):\r\n        if _i == i:\r\n            _x = x\r\n        elif _i != j:\r\n            _x = xp_[_i]\r\n        else:\r\n            continue\r\n        S_ += _x\r\n        c = c * D / (_x * N_COINS)\r\n    c = c * D / (Ann * N_COINS)\r\n    b: uint256 = S_ + D / Ann  # - D\r\n    y_prev: uint256 = 0\r\n    y: uint256 = D\r\n    for _i in range(255):\r\n        y_prev = y\r\n        y = (y*y + c) / (2 * y + b - D)\r\n        # Equality with the precision of 1\r\n        if y > y_prev:\r\n            if y - y_prev <= 1:\r\n                break\r\n        else:\r\n            if y_prev - y <= 1:\r\n                break\r\n    return y\r\n\r\n\r\n@view\r\n@external\r\ndef get_dy(i: int128, j: int128, dx: uint256) -> uint256:\r\n    # dx and dy in c-units\r\n    rates: uint256[N_COINS] = RATES\r\n    xp: uint256[N_COINS] = self._xp()\r\n\r\n    x: uint256 = xp[i] + (dx * rates[i] / PRECISION)\r\n    y: uint256 = self.get_y(i, j, x, xp)\r\n    dy: uint256 = (xp[j] - y - 1) * PRECISION / rates[j]\r\n    _fee: uint256 = self.fee * dy / FEE_DENOMINATOR\r\n    return dy - _fee\r\n\r\n\r\n@view\r\n@external\r\ndef get_dy_underlying(i: int128, j: int128, dx: uint256) -> uint256:\r\n    # dx and dy in underlying units\r\n    xp: uint256[N_COINS] = self._xp()\r\n    precisions: uint256[N_COINS] = PRECISION_MUL\r\n\r\n    x: uint256 = xp[i] + dx * precisions[i]\r\n    y: uint256 = self.get_y(i, j, x, xp)\r\n    dy: uint256 = (xp[j] - y - 1) / precisions[j]\r\n    _fee: uint256 = self.fee * dy / FEE_DENOMINATOR\r\n    return dy - _fee\r\n\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef exchange(i: int128, j: int128, dx: uint256, min_dy: uint256):\r\n    assert not self.is_killed  # dev: is killed\r\n    rates: uint256[N_COINS] = RATES\r\n\r\n    old_balances: uint256[N_COINS] = self.balances\r\n    xp: uint256[N_COINS] = self._xp_mem(old_balances)\r\n\r\n    # Handling an unexpected charge of a fee on transfer (USDT, PAXG)\r\n    dx_w_fee: uint256 = dx\r\n    input_coin: address = self.coins[i]\r\n\r\n    if i == FEE_INDEX:\r\n        dx_w_fee = ERC20(input_coin).balanceOf(self)\r\n\r\n    # \"safeTransferFrom\" which works for ERC20s which return bool or not\r\n    _response: Bytes[32] = raw_call(\r\n        input_coin,\r\n        concat(\r\n            method_id(\"transferFrom(address,address,uint256)\"),\r\n            convert(msg.sender, bytes32),\r\n            convert(self, bytes32),\r\n            convert(dx, bytes32),\r\n        ),\r\n        max_outsize=32,\r\n    )  # dev: failed transfer\r\n    if len(_response) > 0:\r\n        assert convert(_response, bool)  # dev: failed transfer\r\n\r\n    if i == FEE_INDEX:\r\n        dx_w_fee = ERC20(input_coin).balanceOf(self) - dx_w_fee\r\n\r\n    x: uint256 = xp[i] + dx_w_fee * rates[i] / PRECISION\r\n    y: uint256 = self.get_y(i, j, x, xp)\r\n\r\n    dy: uint256 = xp[j] - y - 1  # -1 just in case there were some rounding errors\r\n    dy_fee: uint256 = dy * self.fee / FEE_DENOMINATOR\r\n\r\n    # Convert all to real units\r\n    dy = (dy - dy_fee) * PRECISION / rates[j]\r\n    assert dy >= min_dy, \"Exchange resulted in fewer coins than expected\"\r\n\r\n    dy_admin_fee: uint256 = dy_fee * self.admin_fee / FEE_DENOMINATOR\r\n    dy_admin_fee = dy_admin_fee * PRECISION / rates[j]\r\n\r\n    # Change balances exactly in same way as we change actual ERC20 coin amounts\r\n    self.balances[i] = old_balances[i] + dx_w_fee\r\n    # When rounding errors happen, we undercharge admin fee in favor of LP\r\n    self.balances[j] = old_balances[j] - dy - dy_admin_fee\r\n\r\n    # \"safeTransfer\" which works for ERC20s which return bool or not\r\n    _response = raw_call(\r\n        self.coins[j],\r\n        concat(\r\n            method_id(\"transfer(address,uint256)\"),\r\n            convert(msg.sender, bytes32),\r\n            convert(dy, bytes32),\r\n        ),\r\n        max_outsize=32,\r\n    )  # dev: failed transfer\r\n    if len(_response) > 0:\r\n        assert convert(_response, bool)  # dev: failed transfer\r\n\r\n    log TokenExchange(msg.sender, i, dx, j, dy)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef remove_liquidity(_amount: uint256, min_amounts: uint256[N_COINS]):\r\n    total_supply: uint256 = self.token.totalSupply()\r\n    amounts: uint256[N_COINS] = empty(uint256[N_COINS])\r\n    fees: uint256[N_COINS] = empty(uint256[N_COINS])  # Fees are unused but we've got them historically in event\r\n\r\n    for i in range(N_COINS):\r\n        value: uint256 = self.balances[i] * _amount / total_supply\r\n        assert value >= min_amounts[i], \"Withdrawal resulted in fewer coins than expected\"\r\n        self.balances[i] -= value\r\n        amounts[i] = value\r\n\r\n        # \"safeTransfer\" which works for ERC20s which return bool or not\r\n        _response: Bytes[32] = raw_call(\r\n            self.coins[i],\r\n            concat(\r\n                method_id(\"transfer(address,uint256)\"),\r\n                convert(msg.sender, bytes32),\r\n                convert(value, bytes32),\r\n            ),\r\n            max_outsize=32,\r\n        )  # dev: failed transfer\r\n        if len(_response) > 0:\r\n            assert convert(_response, bool)  # dev: failed transfer\r\n\r\n    self.token.burnFrom(msg.sender, _amount)  # dev: insufficient funds\r\n\r\n    log RemoveLiquidity(msg.sender, amounts, fees, total_supply - _amount)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef remove_liquidity_imbalance(amounts: uint256[N_COINS], max_burn_amount: uint256):\r\n    assert not self.is_killed  # dev: is killed\r\n\r\n    token_supply: uint256 = self.token.totalSupply()\r\n    assert token_supply != 0  # dev: zero total supply\r\n    _fee: uint256 = self.fee * N_COINS / (4 * (N_COINS - 1))\r\n    _admin_fee: uint256 = self.admin_fee\r\n    amp: uint256 = self._A()\r\n\r\n    old_balances: uint256[N_COINS] = self.balances\r\n    new_balances: uint256[N_COINS] = old_balances\r\n    D0: uint256 = self.get_D_mem(old_balances, amp)\r\n    for i in range(N_COINS):\r\n        new_balances[i] -= amounts[i]\r\n    D1: uint256 = self.get_D_mem(new_balances, amp)\r\n    fees: uint256[N_COINS] = empty(uint256[N_COINS])\r\n    for i in range(N_COINS):\r\n        ideal_balance: uint256 = D1 * old_balances[i] / D0\r\n        difference: uint256 = 0\r\n        if ideal_balance > new_balances[i]:\r\n            difference = ideal_balance - new_balances[i]\r\n        else:\r\n            difference = new_balances[i] - ideal_balance\r\n        fees[i] = _fee * difference / FEE_DENOMINATOR\r\n        self.balances[i] = new_balances[i] - (fees[i] * _admin_fee / FEE_DENOMINATOR)\r\n        new_balances[i] -= fees[i]\r\n    D2: uint256 = self.get_D_mem(new_balances, amp)\r\n\r\n    token_amount: uint256 = (D0 - D2) * token_supply / D0\r\n    assert token_amount != 0  # dev: zero tokens burned\r\n    token_amount += 1  # In case of rounding errors - make it unfavorable for the \"attacker\"\r\n    assert token_amount <= max_burn_amount, \"Slippage screwed you\"\r\n\r\n    self.token.burnFrom(msg.sender, token_amount)  # dev: insufficient funds\r\n    for i in range(N_COINS):\r\n        if amounts[i] != 0:\r\n\r\n            # \"safeTransfer\" which works for ERC20s which return bool or not\r\n            _response: Bytes[32] = raw_call(\r\n                self.coins[i],\r\n                concat(\r\n                    method_id(\"transfer(address,uint256)\"),\r\n                    convert(msg.sender, bytes32),\r\n                    convert(amounts[i], bytes32),\r\n                ),\r\n                max_outsize=32,\r\n            )  # dev: failed transfer\r\n            if len(_response) > 0:\r\n                assert convert(_response, bool)  # dev: failed transfer\r\n\r\n    log RemoveLiquidityImbalance(msg.sender, amounts, fees, D1, token_supply - token_amount)\r\n\r\n\r\n@view\r\n@internal\r\ndef get_y_D(A_: uint256, i: int128, xp: uint256[N_COINS], D: uint256) -> uint256:\r\n    \"\"\"\r\n    Calculate x[i] if one reduces D from being calculated for xp to D\r\n\r\n    Done by solving quadratic equation iteratively.\r\n    x_1**2 + x1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\r\n    x_1**2 + b*x_1 = c\r\n\r\n    x_1 = (x_1**2 + c) / (2*x_1 + b)\r\n    \"\"\"\r\n    # x in the input is converted to the same price/precision\r\n\r\n    assert i >= 0  # dev: i below zero\r\n    assert i < N_COINS  # dev: i above N_COINS\r\n\r\n    c: uint256 = D\r\n    S_: uint256 = 0\r\n    Ann: uint256 = A_ * N_COINS\r\n\r\n    _x: uint256 = 0\r\n    for _i in range(N_COINS):\r\n        if _i != i:\r\n            _x = xp[_i]\r\n        else:\r\n            continue\r\n        S_ += _x\r\n        c = c * D / (_x * N_COINS)\r\n    c = c * D / (Ann * N_COINS)\r\n    b: uint256 = S_ + D / Ann\r\n    y_prev: uint256 = 0\r\n    y: uint256 = D\r\n    for _i in range(255):\r\n        y_prev = y\r\n        y = (y*y + c) / (2 * y + b - D)\r\n        # Equality with the precision of 1\r\n        if y > y_prev:\r\n            if y - y_prev <= 1:\r\n                break\r\n        else:\r\n            if y_prev - y <= 1:\r\n                break\r\n    return y\r\n\r\n\r\n@view\r\n@internal\r\ndef _calc_withdraw_one_coin(_token_amount: uint256, i: int128) -> (uint256, uint256):\r\n    # First, need to calculate\r\n    # * Get current D\r\n    # * Solve Eqn against y_i for D - _token_amount\r\n    amp: uint256 = self._A()\r\n    _fee: uint256 = self.fee * N_COINS / (4 * (N_COINS - 1))\r\n    precisions: uint256[N_COINS] = PRECISION_MUL\r\n    total_supply: uint256 = self.token.totalSupply()\r\n\r\n    xp: uint256[N_COINS] = self._xp()\r\n\r\n    D0: uint256 = self.get_D(xp, amp)\r\n    D1: uint256 = D0 - _token_amount * D0 / total_supply\r\n    xp_reduced: uint256[N_COINS] = xp\r\n\r\n    new_y: uint256 = self.get_y_D(amp, i, xp, D1)\r\n    dy_0: uint256 = (xp[i] - new_y) / precisions[i]  # w/o fees\r\n\r\n    for j in range(N_COINS):\r\n        dx_expected: uint256 = 0\r\n        if j == i:\r\n            dx_expected = xp[j] * D1 / D0 - new_y\r\n        else:\r\n            dx_expected = xp[j] - xp[j] * D1 / D0\r\n        xp_reduced[j] -= _fee * dx_expected / FEE_DENOMINATOR\r\n\r\n    dy: uint256 = xp_reduced[i] - self.get_y_D(amp, i, xp_reduced, D1)\r\n    dy = (dy - 1) / precisions[i]  # Withdraw less to account for rounding errors\r\n\r\n    return dy, dy_0 - dy\r\n\r\n\r\n@view\r\n@external\r\ndef calc_withdraw_one_coin(_token_amount: uint256, i: int128) -> uint256:\r\n    return self._calc_withdraw_one_coin(_token_amount, i)[0]\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef remove_liquidity_one_coin(_token_amount: uint256, i: int128, min_amount: uint256):\r\n    \"\"\"\r\n    Remove _amount of liquidity all in a form of coin i\r\n    \"\"\"\r\n    assert not self.is_killed  # dev: is killed\r\n\r\n    dy: uint256 = 0\r\n    dy_fee: uint256 = 0\r\n    dy, dy_fee = self._calc_withdraw_one_coin(_token_amount, i)\r\n    assert dy >= min_amount, \"Not enough coins removed\"\r\n\r\n    self.balances[i] -= (dy + dy_fee * self.admin_fee / FEE_DENOMINATOR)\r\n    self.token.burnFrom(msg.sender, _token_amount)  # dev: insufficient funds\r\n\r\n    # \"safeTransfer\" which works for ERC20s which return bool or not\r\n    _response: Bytes[32] = raw_call(\r\n        self.coins[i],\r\n        concat(\r\n            method_id(\"transfer(address,uint256)\"),\r\n            convert(msg.sender, bytes32),\r\n            convert(dy, bytes32),\r\n        ),\r\n        max_outsize=32,\r\n    )  # dev: failed transfer\r\n    if len(_response) > 0:\r\n        assert convert(_response, bool)  # dev: failed transfer\r\n\r\n    log RemoveLiquidityOne(msg.sender, _token_amount, dy)\r\n\r\n\r\n### Admin functions ###\r\n@external\r\ndef ramp_A(_future_A: uint256, _future_time: uint256):\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    assert block.timestamp >= self.initial_A_time + MIN_RAMP_TIME\r\n    assert _future_time >= block.timestamp + MIN_RAMP_TIME  # dev: insufficient time\r\n\r\n    _initial_A: uint256 = self._A()\r\n    assert (_future_A > 0) and (_future_A < MAX_A)\r\n    assert ((_future_A >= _initial_A) and (_future_A <= _initial_A * MAX_A_CHANGE)) or\\\r\n           ((_future_A < _initial_A) and (_future_A * MAX_A_CHANGE >= _initial_A))\r\n    self.initial_A = _initial_A\r\n    self.future_A = _future_A\r\n    self.initial_A_time = block.timestamp\r\n    self.future_A_time = _future_time\r\n\r\n    log RampA(_initial_A, _future_A, block.timestamp, _future_time)\r\n\r\n\r\n@external\r\ndef stop_ramp_A():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n\r\n    current_A: uint256 = self._A()\r\n    self.initial_A = current_A\r\n    self.future_A = current_A\r\n    self.initial_A_time = block.timestamp\r\n    self.future_A_time = block.timestamp\r\n    # now (block.timestamp < t1) is always False, so we return saved A\r\n\r\n    log StopRampA(current_A, block.timestamp)\r\n\r\n\r\n@external\r\ndef commit_new_fee(new_fee: uint256, new_admin_fee: uint256):\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    assert self.admin_actions_deadline == 0  # dev: active action\r\n    assert new_fee <= MAX_FEE  # dev: fee exceeds maximum\r\n    assert new_admin_fee <= MAX_ADMIN_FEE  # dev: admin fee exceeds maximum\r\n\r\n    _deadline: uint256 = block.timestamp + ADMIN_ACTIONS_DELAY\r\n    self.admin_actions_deadline = _deadline\r\n    self.future_fee = new_fee\r\n    self.future_admin_fee = new_admin_fee\r\n\r\n    log CommitNewFee(_deadline, new_fee, new_admin_fee)\r\n\r\n\r\n@external\r\ndef apply_new_fee():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    assert block.timestamp >= self.admin_actions_deadline  # dev: insufficient time\r\n    assert self.admin_actions_deadline != 0  # dev: no active action\r\n\r\n    self.admin_actions_deadline = 0\r\n    _fee: uint256 = self.future_fee\r\n    _admin_fee: uint256 = self.future_admin_fee\r\n    self.fee = _fee\r\n    self.admin_fee = _admin_fee\r\n\r\n    log NewFee(_fee, _admin_fee)\r\n\r\n\r\n@external\r\ndef revert_new_parameters():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n\r\n    self.admin_actions_deadline = 0\r\n\r\n\r\n@external\r\ndef commit_transfer_ownership(_owner: address):\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    assert self.transfer_ownership_deadline == 0  # dev: active transfer\r\n\r\n    _deadline: uint256 = block.timestamp + ADMIN_ACTIONS_DELAY\r\n    self.transfer_ownership_deadline = _deadline\r\n    self.future_owner = _owner\r\n\r\n    log CommitNewAdmin(_deadline, _owner)\r\n\r\n\r\n@external\r\ndef apply_transfer_ownership():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    assert block.timestamp >= self.transfer_ownership_deadline  # dev: insufficient time\r\n    assert self.transfer_ownership_deadline != 0  # dev: no active transfer\r\n\r\n    self.transfer_ownership_deadline = 0\r\n    _owner: address = self.future_owner\r\n    self.owner = _owner\r\n\r\n    log NewAdmin(_owner)\r\n\r\n\r\n@external\r\ndef revert_transfer_ownership():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n\r\n    self.transfer_ownership_deadline = 0\r\n\r\n\r\n@view\r\n@external\r\ndef admin_balances(i: uint256) -> uint256:\r\n    return ERC20(self.coins[i]).balanceOf(self) - self.balances[i]\r\n\r\n\r\n@external\r\ndef withdraw_admin_fees():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n\r\n    for i in range(N_COINS):\r\n        c: address = self.coins[i]\r\n        value: uint256 = ERC20(c).balanceOf(self) - self.balances[i]\r\n        if value > 0:\r\n            # \"safeTransfer\" which works for ERC20s which return bool or not\r\n            _response: Bytes[32] = raw_call(\r\n                c,\r\n                concat(\r\n                    method_id(\"transfer(address,uint256)\"),\r\n                    convert(msg.sender, bytes32),\r\n                    convert(value, bytes32),\r\n                ),\r\n                max_outsize=32,\r\n            )  # dev: failed transfer\r\n            if len(_response) > 0:\r\n                assert convert(_response, bool)  # dev: failed transfer\r\n\r\n\r\n@external\r\ndef donate_admin_fees():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    for i in range(N_COINS):\r\n        self.balances[i] = ERC20(self.coins[i]).balanceOf(self)\r\n\r\n\r\n@external\r\ndef kill_me():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    assert self.kill_deadline > block.timestamp  # dev: deadline has passed\r\n    self.is_killed = True\r\n\r\n\r\n@external\r\ndef unkill_me():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    self.is_killed = False\r\n",
  "sourcePath": "C:/Users/MayankVats/Desktop/WORK/blockchain/Royale/royale-contracts/contracts/curve/StableSwap3Pool.vy",
  "compiler": {
    "name": "vyper",
    "version": "0.2.7+commit.0b3f3b3"
  },
  "networks": {},
  "schemaVersion": "3.3.2",
  "updatedAt": "2020-12-03T07:30:38.064Z"
}